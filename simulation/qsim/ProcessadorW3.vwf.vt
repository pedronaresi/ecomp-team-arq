// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2017 15:18:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_sample_tst(
	NegativoEx,
	OpExt,
	OpIO,
	OpMem,
	OpSaida,
	OpULA,
	OrigULA,
	PCDst,
	RegDst,
	clock,
	dadosExternos,
	escreveReg,
	halt,
	jal,
	reset,
	sampler_tx
);
input  NegativoEx;
input  OpExt;
input  OpIO;
input  OpMem;
input [2:0] OpSaida;
input [4:0] OpULA;
input  OrigULA;
input [1:0] PCDst;
input  RegDst;
input  clock;
input [15:0] dadosExternos;
input  escreveReg;
input  halt;
input  jal;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(NegativoEx or OpExt or OpIO or OpMem or OpSaida or OpULA or OrigULA or PCDst or RegDst or clock or dadosExternos or escreveReg or halt or jal or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processador_vlg_check_tst (
	dadosEscritaReg,
	display0,
	display1,
	display2,
	display3,
	display4,
	display5,
	display6,
	display7,
	endereco,
	enderecoPC,
	neg1,
	neg2,
	neg3,
	regEscrita,
	saidaULA,
	sampler_rx
);
input [31:0] dadosEscritaReg;
input [3:0] display0;
input [3:0] display1;
input [3:0] display2;
input [3:0] display3;
input [3:0] display4;
input [3:0] display5;
input [3:0] display6;
input [3:0] display7;
input [31:0] endereco;
input [31:0] enderecoPC;
input  neg1;
input  neg2;
input  neg3;
input [4:0] regEscrita;
input [31:0] saidaULA;
input sampler_rx;

reg [31:0] dadosEscritaReg_expected;
reg [3:0] display0_expected;
reg [3:0] display1_expected;
reg [3:0] display2_expected;
reg [3:0] display3_expected;
reg [3:0] display4_expected;
reg [3:0] display5_expected;
reg [3:0] display6_expected;
reg [3:0] display7_expected;
reg [31:0] endereco_expected;
reg [31:0] enderecoPC_expected;
reg  neg1_expected;
reg  neg2_expected;
reg  neg3_expected;
reg [4:0] regEscrita_expected;
reg [31:0] saidaULA_expected;

reg [31:0] dadosEscritaReg_prev;
reg [3:0] display0_prev;
reg [3:0] display1_prev;
reg [3:0] display2_prev;
reg [3:0] display3_prev;
reg [3:0] display4_prev;
reg [3:0] display5_prev;
reg [3:0] display6_prev;
reg [3:0] display7_prev;
reg [31:0] endereco_prev;
reg [31:0] enderecoPC_prev;
reg  neg1_prev;
reg  neg2_prev;
reg  neg3_prev;
reg [4:0] regEscrita_prev;
reg [31:0] saidaULA_prev;

reg [31:0] dadosEscritaReg_expected_prev;
reg [3:0] display0_expected_prev;
reg [3:0] display1_expected_prev;
reg [3:0] display2_expected_prev;
reg [3:0] display3_expected_prev;
reg [3:0] display4_expected_prev;
reg [3:0] display5_expected_prev;
reg [3:0] display6_expected_prev;
reg [3:0] display7_expected_prev;
reg [31:0] endereco_expected_prev;
reg [31:0] enderecoPC_expected_prev;
reg  neg1_expected_prev;
reg  neg2_expected_prev;
reg  neg3_expected_prev;
reg [4:0] regEscrita_expected_prev;
reg [31:0] saidaULA_expected_prev;

reg [31:0] last_dadosEscritaReg_exp;
reg [3:0] last_display0_exp;
reg [3:0] last_display1_exp;
reg [3:0] last_display2_exp;
reg [3:0] last_display3_exp;
reg [3:0] last_display4_exp;
reg [3:0] last_display5_exp;
reg [3:0] last_display6_exp;
reg [3:0] last_display7_exp;
reg [31:0] last_endereco_exp;
reg [31:0] last_enderecoPC_exp;
reg  last_neg1_exp;
reg  last_neg2_exp;
reg  last_neg3_exp;
reg [4:0] last_regEscrita_exp;
reg [31:0] last_saidaULA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	dadosEscritaReg_prev = dadosEscritaReg;
	display0_prev = display0;
	display1_prev = display1;
	display2_prev = display2;
	display3_prev = display3;
	display4_prev = display4;
	display5_prev = display5;
	display6_prev = display6;
	display7_prev = display7;
	endereco_prev = endereco;
	enderecoPC_prev = enderecoPC;
	neg1_prev = neg1;
	neg2_prev = neg2;
	neg3_prev = neg3;
	regEscrita_prev = regEscrita;
	saidaULA_prev = saidaULA;
end

// update expected /o prevs

always @(trigger)
begin
	dadosEscritaReg_expected_prev = dadosEscritaReg_expected;
	display0_expected_prev = display0_expected;
	display1_expected_prev = display1_expected;
	display2_expected_prev = display2_expected;
	display3_expected_prev = display3_expected;
	display4_expected_prev = display4_expected;
	display5_expected_prev = display5_expected;
	display6_expected_prev = display6_expected;
	display7_expected_prev = display7_expected;
	endereco_expected_prev = endereco_expected;
	enderecoPC_expected_prev = enderecoPC_expected;
	neg1_expected_prev = neg1_expected;
	neg2_expected_prev = neg2_expected;
	neg3_expected_prev = neg3_expected;
	regEscrita_expected_prev = regEscrita_expected;
	saidaULA_expected_prev = saidaULA_expected;
end


// expected enderecoPC[ 31 ]
initial
begin
	enderecoPC_expected[31] = 1'bX;
end 
// expected enderecoPC[ 30 ]
initial
begin
	enderecoPC_expected[30] = 1'bX;
end 
// expected enderecoPC[ 29 ]
initial
begin
	enderecoPC_expected[29] = 1'bX;
end 
// expected enderecoPC[ 28 ]
initial
begin
	enderecoPC_expected[28] = 1'bX;
end 
// expected enderecoPC[ 27 ]
initial
begin
	enderecoPC_expected[27] = 1'bX;
end 
// expected enderecoPC[ 26 ]
initial
begin
	enderecoPC_expected[26] = 1'bX;
end 
// expected enderecoPC[ 25 ]
initial
begin
	enderecoPC_expected[25] = 1'bX;
end 
// expected enderecoPC[ 24 ]
initial
begin
	enderecoPC_expected[24] = 1'bX;
end 
// expected enderecoPC[ 23 ]
initial
begin
	enderecoPC_expected[23] = 1'bX;
end 
// expected enderecoPC[ 22 ]
initial
begin
	enderecoPC_expected[22] = 1'bX;
end 
// expected enderecoPC[ 21 ]
initial
begin
	enderecoPC_expected[21] = 1'bX;
end 
// expected enderecoPC[ 20 ]
initial
begin
	enderecoPC_expected[20] = 1'bX;
end 
// expected enderecoPC[ 19 ]
initial
begin
	enderecoPC_expected[19] = 1'bX;
end 
// expected enderecoPC[ 18 ]
initial
begin
	enderecoPC_expected[18] = 1'bX;
end 
// expected enderecoPC[ 17 ]
initial
begin
	enderecoPC_expected[17] = 1'bX;
end 
// expected enderecoPC[ 16 ]
initial
begin
	enderecoPC_expected[16] = 1'bX;
end 
// expected enderecoPC[ 15 ]
initial
begin
	enderecoPC_expected[15] = 1'bX;
end 
// expected enderecoPC[ 14 ]
initial
begin
	enderecoPC_expected[14] = 1'bX;
end 
// expected enderecoPC[ 13 ]
initial
begin
	enderecoPC_expected[13] = 1'bX;
end 
// expected enderecoPC[ 12 ]
initial
begin
	enderecoPC_expected[12] = 1'bX;
end 
// expected enderecoPC[ 11 ]
initial
begin
	enderecoPC_expected[11] = 1'bX;
end 
// expected enderecoPC[ 10 ]
initial
begin
	enderecoPC_expected[10] = 1'bX;
end 
// expected enderecoPC[ 9 ]
initial
begin
	enderecoPC_expected[9] = 1'bX;
end 
// expected enderecoPC[ 8 ]
initial
begin
	enderecoPC_expected[8] = 1'bX;
end 
// expected enderecoPC[ 7 ]
initial
begin
	enderecoPC_expected[7] = 1'bX;
end 
// expected enderecoPC[ 6 ]
initial
begin
	enderecoPC_expected[6] = 1'bX;
end 
// expected enderecoPC[ 5 ]
initial
begin
	enderecoPC_expected[5] = 1'bX;
end 
// expected enderecoPC[ 4 ]
initial
begin
	enderecoPC_expected[4] = 1'bX;
end 
// expected enderecoPC[ 3 ]
initial
begin
	enderecoPC_expected[3] = 1'bX;
end 
// expected enderecoPC[ 2 ]
initial
begin
	enderecoPC_expected[2] = 1'bX;
end 
// expected enderecoPC[ 1 ]
initial
begin
	enderecoPC_expected[1] = 1'bX;
end 
// expected enderecoPC[ 0 ]
initial
begin
	enderecoPC_expected[0] = 1'bX;
end 
// expected endereco[ 31 ]
initial
begin
	endereco_expected[31] = 1'bX;
end 
// expected endereco[ 30 ]
initial
begin
	endereco_expected[30] = 1'bX;
end 
// expected endereco[ 29 ]
initial
begin
	endereco_expected[29] = 1'bX;
end 
// expected endereco[ 28 ]
initial
begin
	endereco_expected[28] = 1'bX;
end 
// expected endereco[ 27 ]
initial
begin
	endereco_expected[27] = 1'bX;
end 
// expected endereco[ 26 ]
initial
begin
	endereco_expected[26] = 1'bX;
end 
// expected endereco[ 25 ]
initial
begin
	endereco_expected[25] = 1'bX;
end 
// expected endereco[ 24 ]
initial
begin
	endereco_expected[24] = 1'bX;
end 
// expected endereco[ 23 ]
initial
begin
	endereco_expected[23] = 1'bX;
end 
// expected endereco[ 22 ]
initial
begin
	endereco_expected[22] = 1'bX;
end 
// expected endereco[ 21 ]
initial
begin
	endereco_expected[21] = 1'bX;
end 
// expected endereco[ 20 ]
initial
begin
	endereco_expected[20] = 1'bX;
end 
// expected endereco[ 19 ]
initial
begin
	endereco_expected[19] = 1'bX;
end 
// expected endereco[ 18 ]
initial
begin
	endereco_expected[18] = 1'bX;
end 
// expected endereco[ 17 ]
initial
begin
	endereco_expected[17] = 1'bX;
end 
// expected endereco[ 16 ]
initial
begin
	endereco_expected[16] = 1'bX;
end 
// expected endereco[ 15 ]
initial
begin
	endereco_expected[15] = 1'bX;
end 
// expected endereco[ 14 ]
initial
begin
	endereco_expected[14] = 1'bX;
end 
// expected endereco[ 13 ]
initial
begin
	endereco_expected[13] = 1'bX;
end 
// expected endereco[ 12 ]
initial
begin
	endereco_expected[12] = 1'bX;
end 
// expected endereco[ 11 ]
initial
begin
	endereco_expected[11] = 1'bX;
end 
// expected endereco[ 10 ]
initial
begin
	endereco_expected[10] = 1'bX;
end 
// expected endereco[ 9 ]
initial
begin
	endereco_expected[9] = 1'bX;
end 
// expected endereco[ 8 ]
initial
begin
	endereco_expected[8] = 1'bX;
end 
// expected endereco[ 7 ]
initial
begin
	endereco_expected[7] = 1'bX;
end 
// expected endereco[ 6 ]
initial
begin
	endereco_expected[6] = 1'bX;
end 
// expected endereco[ 5 ]
initial
begin
	endereco_expected[5] = 1'bX;
end 
// expected endereco[ 4 ]
initial
begin
	endereco_expected[4] = 1'bX;
end 
// expected endereco[ 3 ]
initial
begin
	endereco_expected[3] = 1'bX;
end 
// expected endereco[ 2 ]
initial
begin
	endereco_expected[2] = 1'bX;
end 
// expected endereco[ 1 ]
initial
begin
	endereco_expected[1] = 1'bX;
end 
// expected endereco[ 0 ]
initial
begin
	endereco_expected[0] = 1'bX;
end 
// expected regEscrita[ 4 ]
initial
begin
	regEscrita_expected[4] = 1'bX;
end 
// expected regEscrita[ 3 ]
initial
begin
	regEscrita_expected[3] = 1'bX;
end 
// expected regEscrita[ 2 ]
initial
begin
	regEscrita_expected[2] = 1'bX;
end 
// expected regEscrita[ 1 ]
initial
begin
	regEscrita_expected[1] = 1'bX;
end 
// expected regEscrita[ 0 ]
initial
begin
	regEscrita_expected[0] = 1'bX;
end 
// expected saidaULA[ 31 ]
initial
begin
	saidaULA_expected[31] = 1'bX;
end 
// expected saidaULA[ 30 ]
initial
begin
	saidaULA_expected[30] = 1'bX;
end 
// expected saidaULA[ 29 ]
initial
begin
	saidaULA_expected[29] = 1'bX;
end 
// expected saidaULA[ 28 ]
initial
begin
	saidaULA_expected[28] = 1'bX;
end 
// expected saidaULA[ 27 ]
initial
begin
	saidaULA_expected[27] = 1'bX;
end 
// expected saidaULA[ 26 ]
initial
begin
	saidaULA_expected[26] = 1'bX;
end 
// expected saidaULA[ 25 ]
initial
begin
	saidaULA_expected[25] = 1'bX;
end 
// expected saidaULA[ 24 ]
initial
begin
	saidaULA_expected[24] = 1'bX;
end 
// expected saidaULA[ 23 ]
initial
begin
	saidaULA_expected[23] = 1'bX;
end 
// expected saidaULA[ 22 ]
initial
begin
	saidaULA_expected[22] = 1'bX;
end 
// expected saidaULA[ 21 ]
initial
begin
	saidaULA_expected[21] = 1'bX;
end 
// expected saidaULA[ 20 ]
initial
begin
	saidaULA_expected[20] = 1'bX;
end 
// expected saidaULA[ 19 ]
initial
begin
	saidaULA_expected[19] = 1'bX;
end 
// expected saidaULA[ 18 ]
initial
begin
	saidaULA_expected[18] = 1'bX;
end 
// expected saidaULA[ 17 ]
initial
begin
	saidaULA_expected[17] = 1'bX;
end 
// expected saidaULA[ 16 ]
initial
begin
	saidaULA_expected[16] = 1'bX;
end 
// expected saidaULA[ 15 ]
initial
begin
	saidaULA_expected[15] = 1'bX;
end 
// expected saidaULA[ 14 ]
initial
begin
	saidaULA_expected[14] = 1'bX;
end 
// expected saidaULA[ 13 ]
initial
begin
	saidaULA_expected[13] = 1'bX;
end 
// expected saidaULA[ 12 ]
initial
begin
	saidaULA_expected[12] = 1'bX;
end 
// expected saidaULA[ 11 ]
initial
begin
	saidaULA_expected[11] = 1'bX;
end 
// expected saidaULA[ 10 ]
initial
begin
	saidaULA_expected[10] = 1'bX;
end 
// expected saidaULA[ 9 ]
initial
begin
	saidaULA_expected[9] = 1'bX;
end 
// expected saidaULA[ 8 ]
initial
begin
	saidaULA_expected[8] = 1'bX;
end 
// expected saidaULA[ 7 ]
initial
begin
	saidaULA_expected[7] = 1'bX;
end 
// expected saidaULA[ 6 ]
initial
begin
	saidaULA_expected[6] = 1'bX;
end 
// expected saidaULA[ 5 ]
initial
begin
	saidaULA_expected[5] = 1'bX;
end 
// expected saidaULA[ 4 ]
initial
begin
	saidaULA_expected[4] = 1'bX;
end 
// expected saidaULA[ 3 ]
initial
begin
	saidaULA_expected[3] = 1'bX;
end 
// expected saidaULA[ 2 ]
initial
begin
	saidaULA_expected[2] = 1'bX;
end 
// expected saidaULA[ 1 ]
initial
begin
	saidaULA_expected[1] = 1'bX;
end 
// expected saidaULA[ 0 ]
initial
begin
	saidaULA_expected[0] = 1'bX;
end 
// expected dadosEscritaReg[ 31 ]
initial
begin
	dadosEscritaReg_expected[31] = 1'bX;
end 
// expected dadosEscritaReg[ 30 ]
initial
begin
	dadosEscritaReg_expected[30] = 1'bX;
end 
// expected dadosEscritaReg[ 29 ]
initial
begin
	dadosEscritaReg_expected[29] = 1'bX;
end 
// expected dadosEscritaReg[ 28 ]
initial
begin
	dadosEscritaReg_expected[28] = 1'bX;
end 
// expected dadosEscritaReg[ 27 ]
initial
begin
	dadosEscritaReg_expected[27] = 1'bX;
end 
// expected dadosEscritaReg[ 26 ]
initial
begin
	dadosEscritaReg_expected[26] = 1'bX;
end 
// expected dadosEscritaReg[ 25 ]
initial
begin
	dadosEscritaReg_expected[25] = 1'bX;
end 
// expected dadosEscritaReg[ 24 ]
initial
begin
	dadosEscritaReg_expected[24] = 1'bX;
end 
// expected dadosEscritaReg[ 23 ]
initial
begin
	dadosEscritaReg_expected[23] = 1'bX;
end 
// expected dadosEscritaReg[ 22 ]
initial
begin
	dadosEscritaReg_expected[22] = 1'bX;
end 
// expected dadosEscritaReg[ 21 ]
initial
begin
	dadosEscritaReg_expected[21] = 1'bX;
end 
// expected dadosEscritaReg[ 20 ]
initial
begin
	dadosEscritaReg_expected[20] = 1'bX;
end 
// expected dadosEscritaReg[ 19 ]
initial
begin
	dadosEscritaReg_expected[19] = 1'bX;
end 
// expected dadosEscritaReg[ 18 ]
initial
begin
	dadosEscritaReg_expected[18] = 1'bX;
end 
// expected dadosEscritaReg[ 17 ]
initial
begin
	dadosEscritaReg_expected[17] = 1'bX;
end 
// expected dadosEscritaReg[ 16 ]
initial
begin
	dadosEscritaReg_expected[16] = 1'bX;
end 
// expected dadosEscritaReg[ 15 ]
initial
begin
	dadosEscritaReg_expected[15] = 1'bX;
end 
// expected dadosEscritaReg[ 14 ]
initial
begin
	dadosEscritaReg_expected[14] = 1'bX;
end 
// expected dadosEscritaReg[ 13 ]
initial
begin
	dadosEscritaReg_expected[13] = 1'bX;
end 
// expected dadosEscritaReg[ 12 ]
initial
begin
	dadosEscritaReg_expected[12] = 1'bX;
end 
// expected dadosEscritaReg[ 11 ]
initial
begin
	dadosEscritaReg_expected[11] = 1'bX;
end 
// expected dadosEscritaReg[ 10 ]
initial
begin
	dadosEscritaReg_expected[10] = 1'bX;
end 
// expected dadosEscritaReg[ 9 ]
initial
begin
	dadosEscritaReg_expected[9] = 1'bX;
end 
// expected dadosEscritaReg[ 8 ]
initial
begin
	dadosEscritaReg_expected[8] = 1'bX;
end 
// expected dadosEscritaReg[ 7 ]
initial
begin
	dadosEscritaReg_expected[7] = 1'bX;
end 
// expected dadosEscritaReg[ 6 ]
initial
begin
	dadosEscritaReg_expected[6] = 1'bX;
end 
// expected dadosEscritaReg[ 5 ]
initial
begin
	dadosEscritaReg_expected[5] = 1'bX;
end 
// expected dadosEscritaReg[ 4 ]
initial
begin
	dadosEscritaReg_expected[4] = 1'bX;
end 
// expected dadosEscritaReg[ 3 ]
initial
begin
	dadosEscritaReg_expected[3] = 1'bX;
end 
// expected dadosEscritaReg[ 2 ]
initial
begin
	dadosEscritaReg_expected[2] = 1'bX;
end 
// expected dadosEscritaReg[ 1 ]
initial
begin
	dadosEscritaReg_expected[1] = 1'bX;
end 
// expected dadosEscritaReg[ 0 ]
initial
begin
	dadosEscritaReg_expected[0] = 1'bX;
end 

// expected neg1
initial
begin
	neg1_expected = 1'bX;
end 
// expected display1[ 3 ]
initial
begin
	display1_expected[3] = 1'bX;
end 
// expected display1[ 2 ]
initial
begin
	display1_expected[2] = 1'bX;
end 
// expected display1[ 1 ]
initial
begin
	display1_expected[1] = 1'bX;
end 
// expected display1[ 0 ]
initial
begin
	display1_expected[0] = 1'bX;
end 
// expected display0[ 3 ]
initial
begin
	display0_expected[3] = 1'bX;
end 
// expected display0[ 2 ]
initial
begin
	display0_expected[2] = 1'bX;
end 
// expected display0[ 1 ]
initial
begin
	display0_expected[1] = 1'bX;
end 
// expected display0[ 0 ]
initial
begin
	display0_expected[0] = 1'bX;
end 

// expected neg2
initial
begin
	neg2_expected = 1'bX;
end 
// expected display3[ 3 ]
initial
begin
	display3_expected[3] = 1'bX;
end 
// expected display3[ 2 ]
initial
begin
	display3_expected[2] = 1'bX;
end 
// expected display3[ 1 ]
initial
begin
	display3_expected[1] = 1'bX;
end 
// expected display3[ 0 ]
initial
begin
	display3_expected[0] = 1'bX;
end 
// expected display2[ 3 ]
initial
begin
	display2_expected[3] = 1'bX;
end 
// expected display2[ 2 ]
initial
begin
	display2_expected[2] = 1'bX;
end 
// expected display2[ 1 ]
initial
begin
	display2_expected[1] = 1'bX;
end 
// expected display2[ 0 ]
initial
begin
	display2_expected[0] = 1'bX;
end 

// expected neg3
initial
begin
	neg3_expected = 1'bX;
end 
// expected display7[ 3 ]
initial
begin
	display7_expected[3] = 1'bX;
end 
// expected display7[ 2 ]
initial
begin
	display7_expected[2] = 1'bX;
end 
// expected display7[ 1 ]
initial
begin
	display7_expected[1] = 1'bX;
end 
// expected display7[ 0 ]
initial
begin
	display7_expected[0] = 1'bX;
end 
// expected display6[ 3 ]
initial
begin
	display6_expected[3] = 1'bX;
end 
// expected display6[ 2 ]
initial
begin
	display6_expected[2] = 1'bX;
end 
// expected display6[ 1 ]
initial
begin
	display6_expected[1] = 1'bX;
end 
// expected display6[ 0 ]
initial
begin
	display6_expected[0] = 1'bX;
end 
// expected display5[ 3 ]
initial
begin
	display5_expected[3] = 1'bX;
end 
// expected display5[ 2 ]
initial
begin
	display5_expected[2] = 1'bX;
end 
// expected display5[ 1 ]
initial
begin
	display5_expected[1] = 1'bX;
end 
// expected display5[ 0 ]
initial
begin
	display5_expected[0] = 1'bX;
end 
// expected display4[ 3 ]
initial
begin
	display4_expected[3] = 1'bX;
end 
// expected display4[ 2 ]
initial
begin
	display4_expected[2] = 1'bX;
end 
// expected display4[ 1 ]
initial
begin
	display4_expected[1] = 1'bX;
end 
// expected display4[ 0 ]
initial
begin
	display4_expected[0] = 1'bX;
end 
// generate trigger
always @(dadosEscritaReg_expected or dadosEscritaReg or display0_expected or display0 or display1_expected or display1 or display2_expected or display2 or display3_expected or display3 or display4_expected or display4 or display5_expected or display5 or display6_expected or display6 or display7_expected or display7 or endereco_expected or endereco or enderecoPC_expected or enderecoPC or neg1_expected or neg1 or neg2_expected or neg2 or neg3_expected or neg3 or regEscrita_expected or regEscrita or saidaULA_expected or saidaULA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dadosEscritaReg = %b | expected display0 = %b | expected display1 = %b | expected display2 = %b | expected display3 = %b | expected display4 = %b | expected display5 = %b | expected display6 = %b | expected display7 = %b | expected endereco = %b | expected enderecoPC = %b | expected neg1 = %b | expected neg2 = %b | expected neg3 = %b | expected regEscrita = %b | expected saidaULA = %b | ",dadosEscritaReg_expected_prev,display0_expected_prev,display1_expected_prev,display2_expected_prev,display3_expected_prev,display4_expected_prev,display5_expected_prev,display6_expected_prev,display7_expected_prev,endereco_expected_prev,enderecoPC_expected_prev,neg1_expected_prev,neg2_expected_prev,neg3_expected_prev,regEscrita_expected_prev,saidaULA_expected_prev);
	$display("| real dadosEscritaReg = %b | real display0 = %b | real display1 = %b | real display2 = %b | real display3 = %b | real display4 = %b | real display5 = %b | real display6 = %b | real display7 = %b | real endereco = %b | real enderecoPC = %b | real neg1 = %b | real neg2 = %b | real neg3 = %b | real regEscrita = %b | real saidaULA = %b | ",dadosEscritaReg_prev,display0_prev,display1_prev,display2_prev,display3_prev,display4_prev,display5_prev,display6_prev,display7_prev,endereco_prev,enderecoPC_prev,neg1_prev,neg2_prev,neg3_prev,regEscrita_prev,saidaULA_prev);
`endif
	if (
		( dadosEscritaReg_expected_prev[0] !== 1'bx ) && ( dadosEscritaReg_prev[0] !== dadosEscritaReg_expected_prev[0] )
		&& ((dadosEscritaReg_expected_prev[0] !== last_dadosEscritaReg_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[0] = dadosEscritaReg_expected_prev[0];
	end
	if (
		( dadosEscritaReg_expected_prev[1] !== 1'bx ) && ( dadosEscritaReg_prev[1] !== dadosEscritaReg_expected_prev[1] )
		&& ((dadosEscritaReg_expected_prev[1] !== last_dadosEscritaReg_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[1] = dadosEscritaReg_expected_prev[1];
	end
	if (
		( dadosEscritaReg_expected_prev[2] !== 1'bx ) && ( dadosEscritaReg_prev[2] !== dadosEscritaReg_expected_prev[2] )
		&& ((dadosEscritaReg_expected_prev[2] !== last_dadosEscritaReg_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[2] = dadosEscritaReg_expected_prev[2];
	end
	if (
		( dadosEscritaReg_expected_prev[3] !== 1'bx ) && ( dadosEscritaReg_prev[3] !== dadosEscritaReg_expected_prev[3] )
		&& ((dadosEscritaReg_expected_prev[3] !== last_dadosEscritaReg_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[3] = dadosEscritaReg_expected_prev[3];
	end
	if (
		( dadosEscritaReg_expected_prev[4] !== 1'bx ) && ( dadosEscritaReg_prev[4] !== dadosEscritaReg_expected_prev[4] )
		&& ((dadosEscritaReg_expected_prev[4] !== last_dadosEscritaReg_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[4] = dadosEscritaReg_expected_prev[4];
	end
	if (
		( dadosEscritaReg_expected_prev[5] !== 1'bx ) && ( dadosEscritaReg_prev[5] !== dadosEscritaReg_expected_prev[5] )
		&& ((dadosEscritaReg_expected_prev[5] !== last_dadosEscritaReg_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[5] = dadosEscritaReg_expected_prev[5];
	end
	if (
		( dadosEscritaReg_expected_prev[6] !== 1'bx ) && ( dadosEscritaReg_prev[6] !== dadosEscritaReg_expected_prev[6] )
		&& ((dadosEscritaReg_expected_prev[6] !== last_dadosEscritaReg_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[6] = dadosEscritaReg_expected_prev[6];
	end
	if (
		( dadosEscritaReg_expected_prev[7] !== 1'bx ) && ( dadosEscritaReg_prev[7] !== dadosEscritaReg_expected_prev[7] )
		&& ((dadosEscritaReg_expected_prev[7] !== last_dadosEscritaReg_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[7] = dadosEscritaReg_expected_prev[7];
	end
	if (
		( dadosEscritaReg_expected_prev[8] !== 1'bx ) && ( dadosEscritaReg_prev[8] !== dadosEscritaReg_expected_prev[8] )
		&& ((dadosEscritaReg_expected_prev[8] !== last_dadosEscritaReg_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[8] = dadosEscritaReg_expected_prev[8];
	end
	if (
		( dadosEscritaReg_expected_prev[9] !== 1'bx ) && ( dadosEscritaReg_prev[9] !== dadosEscritaReg_expected_prev[9] )
		&& ((dadosEscritaReg_expected_prev[9] !== last_dadosEscritaReg_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[9] = dadosEscritaReg_expected_prev[9];
	end
	if (
		( dadosEscritaReg_expected_prev[10] !== 1'bx ) && ( dadosEscritaReg_prev[10] !== dadosEscritaReg_expected_prev[10] )
		&& ((dadosEscritaReg_expected_prev[10] !== last_dadosEscritaReg_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[10] = dadosEscritaReg_expected_prev[10];
	end
	if (
		( dadosEscritaReg_expected_prev[11] !== 1'bx ) && ( dadosEscritaReg_prev[11] !== dadosEscritaReg_expected_prev[11] )
		&& ((dadosEscritaReg_expected_prev[11] !== last_dadosEscritaReg_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[11] = dadosEscritaReg_expected_prev[11];
	end
	if (
		( dadosEscritaReg_expected_prev[12] !== 1'bx ) && ( dadosEscritaReg_prev[12] !== dadosEscritaReg_expected_prev[12] )
		&& ((dadosEscritaReg_expected_prev[12] !== last_dadosEscritaReg_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[12] = dadosEscritaReg_expected_prev[12];
	end
	if (
		( dadosEscritaReg_expected_prev[13] !== 1'bx ) && ( dadosEscritaReg_prev[13] !== dadosEscritaReg_expected_prev[13] )
		&& ((dadosEscritaReg_expected_prev[13] !== last_dadosEscritaReg_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[13] = dadosEscritaReg_expected_prev[13];
	end
	if (
		( dadosEscritaReg_expected_prev[14] !== 1'bx ) && ( dadosEscritaReg_prev[14] !== dadosEscritaReg_expected_prev[14] )
		&& ((dadosEscritaReg_expected_prev[14] !== last_dadosEscritaReg_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[14] = dadosEscritaReg_expected_prev[14];
	end
	if (
		( dadosEscritaReg_expected_prev[15] !== 1'bx ) && ( dadosEscritaReg_prev[15] !== dadosEscritaReg_expected_prev[15] )
		&& ((dadosEscritaReg_expected_prev[15] !== last_dadosEscritaReg_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[15] = dadosEscritaReg_expected_prev[15];
	end
	if (
		( dadosEscritaReg_expected_prev[16] !== 1'bx ) && ( dadosEscritaReg_prev[16] !== dadosEscritaReg_expected_prev[16] )
		&& ((dadosEscritaReg_expected_prev[16] !== last_dadosEscritaReg_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[16] = dadosEscritaReg_expected_prev[16];
	end
	if (
		( dadosEscritaReg_expected_prev[17] !== 1'bx ) && ( dadosEscritaReg_prev[17] !== dadosEscritaReg_expected_prev[17] )
		&& ((dadosEscritaReg_expected_prev[17] !== last_dadosEscritaReg_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[17] = dadosEscritaReg_expected_prev[17];
	end
	if (
		( dadosEscritaReg_expected_prev[18] !== 1'bx ) && ( dadosEscritaReg_prev[18] !== dadosEscritaReg_expected_prev[18] )
		&& ((dadosEscritaReg_expected_prev[18] !== last_dadosEscritaReg_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[18] = dadosEscritaReg_expected_prev[18];
	end
	if (
		( dadosEscritaReg_expected_prev[19] !== 1'bx ) && ( dadosEscritaReg_prev[19] !== dadosEscritaReg_expected_prev[19] )
		&& ((dadosEscritaReg_expected_prev[19] !== last_dadosEscritaReg_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[19] = dadosEscritaReg_expected_prev[19];
	end
	if (
		( dadosEscritaReg_expected_prev[20] !== 1'bx ) && ( dadosEscritaReg_prev[20] !== dadosEscritaReg_expected_prev[20] )
		&& ((dadosEscritaReg_expected_prev[20] !== last_dadosEscritaReg_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[20] = dadosEscritaReg_expected_prev[20];
	end
	if (
		( dadosEscritaReg_expected_prev[21] !== 1'bx ) && ( dadosEscritaReg_prev[21] !== dadosEscritaReg_expected_prev[21] )
		&& ((dadosEscritaReg_expected_prev[21] !== last_dadosEscritaReg_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[21] = dadosEscritaReg_expected_prev[21];
	end
	if (
		( dadosEscritaReg_expected_prev[22] !== 1'bx ) && ( dadosEscritaReg_prev[22] !== dadosEscritaReg_expected_prev[22] )
		&& ((dadosEscritaReg_expected_prev[22] !== last_dadosEscritaReg_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[22] = dadosEscritaReg_expected_prev[22];
	end
	if (
		( dadosEscritaReg_expected_prev[23] !== 1'bx ) && ( dadosEscritaReg_prev[23] !== dadosEscritaReg_expected_prev[23] )
		&& ((dadosEscritaReg_expected_prev[23] !== last_dadosEscritaReg_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[23] = dadosEscritaReg_expected_prev[23];
	end
	if (
		( dadosEscritaReg_expected_prev[24] !== 1'bx ) && ( dadosEscritaReg_prev[24] !== dadosEscritaReg_expected_prev[24] )
		&& ((dadosEscritaReg_expected_prev[24] !== last_dadosEscritaReg_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[24] = dadosEscritaReg_expected_prev[24];
	end
	if (
		( dadosEscritaReg_expected_prev[25] !== 1'bx ) && ( dadosEscritaReg_prev[25] !== dadosEscritaReg_expected_prev[25] )
		&& ((dadosEscritaReg_expected_prev[25] !== last_dadosEscritaReg_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[25] = dadosEscritaReg_expected_prev[25];
	end
	if (
		( dadosEscritaReg_expected_prev[26] !== 1'bx ) && ( dadosEscritaReg_prev[26] !== dadosEscritaReg_expected_prev[26] )
		&& ((dadosEscritaReg_expected_prev[26] !== last_dadosEscritaReg_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[26] = dadosEscritaReg_expected_prev[26];
	end
	if (
		( dadosEscritaReg_expected_prev[27] !== 1'bx ) && ( dadosEscritaReg_prev[27] !== dadosEscritaReg_expected_prev[27] )
		&& ((dadosEscritaReg_expected_prev[27] !== last_dadosEscritaReg_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[27] = dadosEscritaReg_expected_prev[27];
	end
	if (
		( dadosEscritaReg_expected_prev[28] !== 1'bx ) && ( dadosEscritaReg_prev[28] !== dadosEscritaReg_expected_prev[28] )
		&& ((dadosEscritaReg_expected_prev[28] !== last_dadosEscritaReg_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[28] = dadosEscritaReg_expected_prev[28];
	end
	if (
		( dadosEscritaReg_expected_prev[29] !== 1'bx ) && ( dadosEscritaReg_prev[29] !== dadosEscritaReg_expected_prev[29] )
		&& ((dadosEscritaReg_expected_prev[29] !== last_dadosEscritaReg_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[29] = dadosEscritaReg_expected_prev[29];
	end
	if (
		( dadosEscritaReg_expected_prev[30] !== 1'bx ) && ( dadosEscritaReg_prev[30] !== dadosEscritaReg_expected_prev[30] )
		&& ((dadosEscritaReg_expected_prev[30] !== last_dadosEscritaReg_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[30] = dadosEscritaReg_expected_prev[30];
	end
	if (
		( dadosEscritaReg_expected_prev[31] !== 1'bx ) && ( dadosEscritaReg_prev[31] !== dadosEscritaReg_expected_prev[31] )
		&& ((dadosEscritaReg_expected_prev[31] !== last_dadosEscritaReg_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosEscritaReg[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosEscritaReg_expected_prev);
		$display ("     Real value = %b", dadosEscritaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosEscritaReg_exp[31] = dadosEscritaReg_expected_prev[31];
	end
	if (
		( display0_expected_prev[0] !== 1'bx ) && ( display0_prev[0] !== display0_expected_prev[0] )
		&& ((display0_expected_prev[0] !== last_display0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[0] = display0_expected_prev[0];
	end
	if (
		( display0_expected_prev[1] !== 1'bx ) && ( display0_prev[1] !== display0_expected_prev[1] )
		&& ((display0_expected_prev[1] !== last_display0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[1] = display0_expected_prev[1];
	end
	if (
		( display0_expected_prev[2] !== 1'bx ) && ( display0_prev[2] !== display0_expected_prev[2] )
		&& ((display0_expected_prev[2] !== last_display0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[2] = display0_expected_prev[2];
	end
	if (
		( display0_expected_prev[3] !== 1'bx ) && ( display0_prev[3] !== display0_expected_prev[3] )
		&& ((display0_expected_prev[3] !== last_display0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[3] = display0_expected_prev[3];
	end
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display2_expected_prev[0] !== 1'bx ) && ( display2_prev[0] !== display2_expected_prev[0] )
		&& ((display2_expected_prev[0] !== last_display2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[0] = display2_expected_prev[0];
	end
	if (
		( display2_expected_prev[1] !== 1'bx ) && ( display2_prev[1] !== display2_expected_prev[1] )
		&& ((display2_expected_prev[1] !== last_display2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[1] = display2_expected_prev[1];
	end
	if (
		( display2_expected_prev[2] !== 1'bx ) && ( display2_prev[2] !== display2_expected_prev[2] )
		&& ((display2_expected_prev[2] !== last_display2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[2] = display2_expected_prev[2];
	end
	if (
		( display2_expected_prev[3] !== 1'bx ) && ( display2_prev[3] !== display2_expected_prev[3] )
		&& ((display2_expected_prev[3] !== last_display2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[3] = display2_expected_prev[3];
	end
	if (
		( display3_expected_prev[0] !== 1'bx ) && ( display3_prev[0] !== display3_expected_prev[0] )
		&& ((display3_expected_prev[0] !== last_display3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[0] = display3_expected_prev[0];
	end
	if (
		( display3_expected_prev[1] !== 1'bx ) && ( display3_prev[1] !== display3_expected_prev[1] )
		&& ((display3_expected_prev[1] !== last_display3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[1] = display3_expected_prev[1];
	end
	if (
		( display3_expected_prev[2] !== 1'bx ) && ( display3_prev[2] !== display3_expected_prev[2] )
		&& ((display3_expected_prev[2] !== last_display3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[2] = display3_expected_prev[2];
	end
	if (
		( display3_expected_prev[3] !== 1'bx ) && ( display3_prev[3] !== display3_expected_prev[3] )
		&& ((display3_expected_prev[3] !== last_display3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[3] = display3_expected_prev[3];
	end
	if (
		( display4_expected_prev[0] !== 1'bx ) && ( display4_prev[0] !== display4_expected_prev[0] )
		&& ((display4_expected_prev[0] !== last_display4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[0] = display4_expected_prev[0];
	end
	if (
		( display4_expected_prev[1] !== 1'bx ) && ( display4_prev[1] !== display4_expected_prev[1] )
		&& ((display4_expected_prev[1] !== last_display4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[1] = display4_expected_prev[1];
	end
	if (
		( display4_expected_prev[2] !== 1'bx ) && ( display4_prev[2] !== display4_expected_prev[2] )
		&& ((display4_expected_prev[2] !== last_display4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[2] = display4_expected_prev[2];
	end
	if (
		( display4_expected_prev[3] !== 1'bx ) && ( display4_prev[3] !== display4_expected_prev[3] )
		&& ((display4_expected_prev[3] !== last_display4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[3] = display4_expected_prev[3];
	end
	if (
		( display5_expected_prev[0] !== 1'bx ) && ( display5_prev[0] !== display5_expected_prev[0] )
		&& ((display5_expected_prev[0] !== last_display5_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[0] = display5_expected_prev[0];
	end
	if (
		( display5_expected_prev[1] !== 1'bx ) && ( display5_prev[1] !== display5_expected_prev[1] )
		&& ((display5_expected_prev[1] !== last_display5_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[1] = display5_expected_prev[1];
	end
	if (
		( display5_expected_prev[2] !== 1'bx ) && ( display5_prev[2] !== display5_expected_prev[2] )
		&& ((display5_expected_prev[2] !== last_display5_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[2] = display5_expected_prev[2];
	end
	if (
		( display5_expected_prev[3] !== 1'bx ) && ( display5_prev[3] !== display5_expected_prev[3] )
		&& ((display5_expected_prev[3] !== last_display5_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[3] = display5_expected_prev[3];
	end
	if (
		( display6_expected_prev[0] !== 1'bx ) && ( display6_prev[0] !== display6_expected_prev[0] )
		&& ((display6_expected_prev[0] !== last_display6_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[0] = display6_expected_prev[0];
	end
	if (
		( display6_expected_prev[1] !== 1'bx ) && ( display6_prev[1] !== display6_expected_prev[1] )
		&& ((display6_expected_prev[1] !== last_display6_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[1] = display6_expected_prev[1];
	end
	if (
		( display6_expected_prev[2] !== 1'bx ) && ( display6_prev[2] !== display6_expected_prev[2] )
		&& ((display6_expected_prev[2] !== last_display6_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[2] = display6_expected_prev[2];
	end
	if (
		( display6_expected_prev[3] !== 1'bx ) && ( display6_prev[3] !== display6_expected_prev[3] )
		&& ((display6_expected_prev[3] !== last_display6_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[3] = display6_expected_prev[3];
	end
	if (
		( display7_expected_prev[0] !== 1'bx ) && ( display7_prev[0] !== display7_expected_prev[0] )
		&& ((display7_expected_prev[0] !== last_display7_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[0] = display7_expected_prev[0];
	end
	if (
		( display7_expected_prev[1] !== 1'bx ) && ( display7_prev[1] !== display7_expected_prev[1] )
		&& ((display7_expected_prev[1] !== last_display7_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[1] = display7_expected_prev[1];
	end
	if (
		( display7_expected_prev[2] !== 1'bx ) && ( display7_prev[2] !== display7_expected_prev[2] )
		&& ((display7_expected_prev[2] !== last_display7_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[2] = display7_expected_prev[2];
	end
	if (
		( display7_expected_prev[3] !== 1'bx ) && ( display7_prev[3] !== display7_expected_prev[3] )
		&& ((display7_expected_prev[3] !== last_display7_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[3] = display7_expected_prev[3];
	end
	if (
		( endereco_expected_prev[0] !== 1'bx ) && ( endereco_prev[0] !== endereco_expected_prev[0] )
		&& ((endereco_expected_prev[0] !== last_endereco_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[0] = endereco_expected_prev[0];
	end
	if (
		( endereco_expected_prev[1] !== 1'bx ) && ( endereco_prev[1] !== endereco_expected_prev[1] )
		&& ((endereco_expected_prev[1] !== last_endereco_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[1] = endereco_expected_prev[1];
	end
	if (
		( endereco_expected_prev[2] !== 1'bx ) && ( endereco_prev[2] !== endereco_expected_prev[2] )
		&& ((endereco_expected_prev[2] !== last_endereco_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[2] = endereco_expected_prev[2];
	end
	if (
		( endereco_expected_prev[3] !== 1'bx ) && ( endereco_prev[3] !== endereco_expected_prev[3] )
		&& ((endereco_expected_prev[3] !== last_endereco_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[3] = endereco_expected_prev[3];
	end
	if (
		( endereco_expected_prev[4] !== 1'bx ) && ( endereco_prev[4] !== endereco_expected_prev[4] )
		&& ((endereco_expected_prev[4] !== last_endereco_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[4] = endereco_expected_prev[4];
	end
	if (
		( endereco_expected_prev[5] !== 1'bx ) && ( endereco_prev[5] !== endereco_expected_prev[5] )
		&& ((endereco_expected_prev[5] !== last_endereco_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[5] = endereco_expected_prev[5];
	end
	if (
		( endereco_expected_prev[6] !== 1'bx ) && ( endereco_prev[6] !== endereco_expected_prev[6] )
		&& ((endereco_expected_prev[6] !== last_endereco_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[6] = endereco_expected_prev[6];
	end
	if (
		( endereco_expected_prev[7] !== 1'bx ) && ( endereco_prev[7] !== endereco_expected_prev[7] )
		&& ((endereco_expected_prev[7] !== last_endereco_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[7] = endereco_expected_prev[7];
	end
	if (
		( endereco_expected_prev[8] !== 1'bx ) && ( endereco_prev[8] !== endereco_expected_prev[8] )
		&& ((endereco_expected_prev[8] !== last_endereco_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[8] = endereco_expected_prev[8];
	end
	if (
		( endereco_expected_prev[9] !== 1'bx ) && ( endereco_prev[9] !== endereco_expected_prev[9] )
		&& ((endereco_expected_prev[9] !== last_endereco_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[9] = endereco_expected_prev[9];
	end
	if (
		( endereco_expected_prev[10] !== 1'bx ) && ( endereco_prev[10] !== endereco_expected_prev[10] )
		&& ((endereco_expected_prev[10] !== last_endereco_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[10] = endereco_expected_prev[10];
	end
	if (
		( endereco_expected_prev[11] !== 1'bx ) && ( endereco_prev[11] !== endereco_expected_prev[11] )
		&& ((endereco_expected_prev[11] !== last_endereco_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[11] = endereco_expected_prev[11];
	end
	if (
		( endereco_expected_prev[12] !== 1'bx ) && ( endereco_prev[12] !== endereco_expected_prev[12] )
		&& ((endereco_expected_prev[12] !== last_endereco_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[12] = endereco_expected_prev[12];
	end
	if (
		( endereco_expected_prev[13] !== 1'bx ) && ( endereco_prev[13] !== endereco_expected_prev[13] )
		&& ((endereco_expected_prev[13] !== last_endereco_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[13] = endereco_expected_prev[13];
	end
	if (
		( endereco_expected_prev[14] !== 1'bx ) && ( endereco_prev[14] !== endereco_expected_prev[14] )
		&& ((endereco_expected_prev[14] !== last_endereco_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[14] = endereco_expected_prev[14];
	end
	if (
		( endereco_expected_prev[15] !== 1'bx ) && ( endereco_prev[15] !== endereco_expected_prev[15] )
		&& ((endereco_expected_prev[15] !== last_endereco_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[15] = endereco_expected_prev[15];
	end
	if (
		( endereco_expected_prev[16] !== 1'bx ) && ( endereco_prev[16] !== endereco_expected_prev[16] )
		&& ((endereco_expected_prev[16] !== last_endereco_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[16] = endereco_expected_prev[16];
	end
	if (
		( endereco_expected_prev[17] !== 1'bx ) && ( endereco_prev[17] !== endereco_expected_prev[17] )
		&& ((endereco_expected_prev[17] !== last_endereco_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[17] = endereco_expected_prev[17];
	end
	if (
		( endereco_expected_prev[18] !== 1'bx ) && ( endereco_prev[18] !== endereco_expected_prev[18] )
		&& ((endereco_expected_prev[18] !== last_endereco_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[18] = endereco_expected_prev[18];
	end
	if (
		( endereco_expected_prev[19] !== 1'bx ) && ( endereco_prev[19] !== endereco_expected_prev[19] )
		&& ((endereco_expected_prev[19] !== last_endereco_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[19] = endereco_expected_prev[19];
	end
	if (
		( endereco_expected_prev[20] !== 1'bx ) && ( endereco_prev[20] !== endereco_expected_prev[20] )
		&& ((endereco_expected_prev[20] !== last_endereco_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[20] = endereco_expected_prev[20];
	end
	if (
		( endereco_expected_prev[21] !== 1'bx ) && ( endereco_prev[21] !== endereco_expected_prev[21] )
		&& ((endereco_expected_prev[21] !== last_endereco_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[21] = endereco_expected_prev[21];
	end
	if (
		( endereco_expected_prev[22] !== 1'bx ) && ( endereco_prev[22] !== endereco_expected_prev[22] )
		&& ((endereco_expected_prev[22] !== last_endereco_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[22] = endereco_expected_prev[22];
	end
	if (
		( endereco_expected_prev[23] !== 1'bx ) && ( endereco_prev[23] !== endereco_expected_prev[23] )
		&& ((endereco_expected_prev[23] !== last_endereco_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[23] = endereco_expected_prev[23];
	end
	if (
		( endereco_expected_prev[24] !== 1'bx ) && ( endereco_prev[24] !== endereco_expected_prev[24] )
		&& ((endereco_expected_prev[24] !== last_endereco_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[24] = endereco_expected_prev[24];
	end
	if (
		( endereco_expected_prev[25] !== 1'bx ) && ( endereco_prev[25] !== endereco_expected_prev[25] )
		&& ((endereco_expected_prev[25] !== last_endereco_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[25] = endereco_expected_prev[25];
	end
	if (
		( endereco_expected_prev[26] !== 1'bx ) && ( endereco_prev[26] !== endereco_expected_prev[26] )
		&& ((endereco_expected_prev[26] !== last_endereco_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[26] = endereco_expected_prev[26];
	end
	if (
		( endereco_expected_prev[27] !== 1'bx ) && ( endereco_prev[27] !== endereco_expected_prev[27] )
		&& ((endereco_expected_prev[27] !== last_endereco_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[27] = endereco_expected_prev[27];
	end
	if (
		( endereco_expected_prev[28] !== 1'bx ) && ( endereco_prev[28] !== endereco_expected_prev[28] )
		&& ((endereco_expected_prev[28] !== last_endereco_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[28] = endereco_expected_prev[28];
	end
	if (
		( endereco_expected_prev[29] !== 1'bx ) && ( endereco_prev[29] !== endereco_expected_prev[29] )
		&& ((endereco_expected_prev[29] !== last_endereco_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[29] = endereco_expected_prev[29];
	end
	if (
		( endereco_expected_prev[30] !== 1'bx ) && ( endereco_prev[30] !== endereco_expected_prev[30] )
		&& ((endereco_expected_prev[30] !== last_endereco_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[30] = endereco_expected_prev[30];
	end
	if (
		( endereco_expected_prev[31] !== 1'bx ) && ( endereco_prev[31] !== endereco_expected_prev[31] )
		&& ((endereco_expected_prev[31] !== last_endereco_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port endereco[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", endereco_expected_prev);
		$display ("     Real value = %b", endereco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_endereco_exp[31] = endereco_expected_prev[31];
	end
	if (
		( enderecoPC_expected_prev[0] !== 1'bx ) && ( enderecoPC_prev[0] !== enderecoPC_expected_prev[0] )
		&& ((enderecoPC_expected_prev[0] !== last_enderecoPC_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[0] = enderecoPC_expected_prev[0];
	end
	if (
		( enderecoPC_expected_prev[1] !== 1'bx ) && ( enderecoPC_prev[1] !== enderecoPC_expected_prev[1] )
		&& ((enderecoPC_expected_prev[1] !== last_enderecoPC_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[1] = enderecoPC_expected_prev[1];
	end
	if (
		( enderecoPC_expected_prev[2] !== 1'bx ) && ( enderecoPC_prev[2] !== enderecoPC_expected_prev[2] )
		&& ((enderecoPC_expected_prev[2] !== last_enderecoPC_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[2] = enderecoPC_expected_prev[2];
	end
	if (
		( enderecoPC_expected_prev[3] !== 1'bx ) && ( enderecoPC_prev[3] !== enderecoPC_expected_prev[3] )
		&& ((enderecoPC_expected_prev[3] !== last_enderecoPC_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[3] = enderecoPC_expected_prev[3];
	end
	if (
		( enderecoPC_expected_prev[4] !== 1'bx ) && ( enderecoPC_prev[4] !== enderecoPC_expected_prev[4] )
		&& ((enderecoPC_expected_prev[4] !== last_enderecoPC_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[4] = enderecoPC_expected_prev[4];
	end
	if (
		( enderecoPC_expected_prev[5] !== 1'bx ) && ( enderecoPC_prev[5] !== enderecoPC_expected_prev[5] )
		&& ((enderecoPC_expected_prev[5] !== last_enderecoPC_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[5] = enderecoPC_expected_prev[5];
	end
	if (
		( enderecoPC_expected_prev[6] !== 1'bx ) && ( enderecoPC_prev[6] !== enderecoPC_expected_prev[6] )
		&& ((enderecoPC_expected_prev[6] !== last_enderecoPC_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[6] = enderecoPC_expected_prev[6];
	end
	if (
		( enderecoPC_expected_prev[7] !== 1'bx ) && ( enderecoPC_prev[7] !== enderecoPC_expected_prev[7] )
		&& ((enderecoPC_expected_prev[7] !== last_enderecoPC_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[7] = enderecoPC_expected_prev[7];
	end
	if (
		( enderecoPC_expected_prev[8] !== 1'bx ) && ( enderecoPC_prev[8] !== enderecoPC_expected_prev[8] )
		&& ((enderecoPC_expected_prev[8] !== last_enderecoPC_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[8] = enderecoPC_expected_prev[8];
	end
	if (
		( enderecoPC_expected_prev[9] !== 1'bx ) && ( enderecoPC_prev[9] !== enderecoPC_expected_prev[9] )
		&& ((enderecoPC_expected_prev[9] !== last_enderecoPC_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[9] = enderecoPC_expected_prev[9];
	end
	if (
		( enderecoPC_expected_prev[10] !== 1'bx ) && ( enderecoPC_prev[10] !== enderecoPC_expected_prev[10] )
		&& ((enderecoPC_expected_prev[10] !== last_enderecoPC_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[10] = enderecoPC_expected_prev[10];
	end
	if (
		( enderecoPC_expected_prev[11] !== 1'bx ) && ( enderecoPC_prev[11] !== enderecoPC_expected_prev[11] )
		&& ((enderecoPC_expected_prev[11] !== last_enderecoPC_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[11] = enderecoPC_expected_prev[11];
	end
	if (
		( enderecoPC_expected_prev[12] !== 1'bx ) && ( enderecoPC_prev[12] !== enderecoPC_expected_prev[12] )
		&& ((enderecoPC_expected_prev[12] !== last_enderecoPC_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[12] = enderecoPC_expected_prev[12];
	end
	if (
		( enderecoPC_expected_prev[13] !== 1'bx ) && ( enderecoPC_prev[13] !== enderecoPC_expected_prev[13] )
		&& ((enderecoPC_expected_prev[13] !== last_enderecoPC_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[13] = enderecoPC_expected_prev[13];
	end
	if (
		( enderecoPC_expected_prev[14] !== 1'bx ) && ( enderecoPC_prev[14] !== enderecoPC_expected_prev[14] )
		&& ((enderecoPC_expected_prev[14] !== last_enderecoPC_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[14] = enderecoPC_expected_prev[14];
	end
	if (
		( enderecoPC_expected_prev[15] !== 1'bx ) && ( enderecoPC_prev[15] !== enderecoPC_expected_prev[15] )
		&& ((enderecoPC_expected_prev[15] !== last_enderecoPC_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[15] = enderecoPC_expected_prev[15];
	end
	if (
		( enderecoPC_expected_prev[16] !== 1'bx ) && ( enderecoPC_prev[16] !== enderecoPC_expected_prev[16] )
		&& ((enderecoPC_expected_prev[16] !== last_enderecoPC_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[16] = enderecoPC_expected_prev[16];
	end
	if (
		( enderecoPC_expected_prev[17] !== 1'bx ) && ( enderecoPC_prev[17] !== enderecoPC_expected_prev[17] )
		&& ((enderecoPC_expected_prev[17] !== last_enderecoPC_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[17] = enderecoPC_expected_prev[17];
	end
	if (
		( enderecoPC_expected_prev[18] !== 1'bx ) && ( enderecoPC_prev[18] !== enderecoPC_expected_prev[18] )
		&& ((enderecoPC_expected_prev[18] !== last_enderecoPC_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[18] = enderecoPC_expected_prev[18];
	end
	if (
		( enderecoPC_expected_prev[19] !== 1'bx ) && ( enderecoPC_prev[19] !== enderecoPC_expected_prev[19] )
		&& ((enderecoPC_expected_prev[19] !== last_enderecoPC_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[19] = enderecoPC_expected_prev[19];
	end
	if (
		( enderecoPC_expected_prev[20] !== 1'bx ) && ( enderecoPC_prev[20] !== enderecoPC_expected_prev[20] )
		&& ((enderecoPC_expected_prev[20] !== last_enderecoPC_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[20] = enderecoPC_expected_prev[20];
	end
	if (
		( enderecoPC_expected_prev[21] !== 1'bx ) && ( enderecoPC_prev[21] !== enderecoPC_expected_prev[21] )
		&& ((enderecoPC_expected_prev[21] !== last_enderecoPC_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[21] = enderecoPC_expected_prev[21];
	end
	if (
		( enderecoPC_expected_prev[22] !== 1'bx ) && ( enderecoPC_prev[22] !== enderecoPC_expected_prev[22] )
		&& ((enderecoPC_expected_prev[22] !== last_enderecoPC_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[22] = enderecoPC_expected_prev[22];
	end
	if (
		( enderecoPC_expected_prev[23] !== 1'bx ) && ( enderecoPC_prev[23] !== enderecoPC_expected_prev[23] )
		&& ((enderecoPC_expected_prev[23] !== last_enderecoPC_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[23] = enderecoPC_expected_prev[23];
	end
	if (
		( enderecoPC_expected_prev[24] !== 1'bx ) && ( enderecoPC_prev[24] !== enderecoPC_expected_prev[24] )
		&& ((enderecoPC_expected_prev[24] !== last_enderecoPC_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[24] = enderecoPC_expected_prev[24];
	end
	if (
		( enderecoPC_expected_prev[25] !== 1'bx ) && ( enderecoPC_prev[25] !== enderecoPC_expected_prev[25] )
		&& ((enderecoPC_expected_prev[25] !== last_enderecoPC_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[25] = enderecoPC_expected_prev[25];
	end
	if (
		( enderecoPC_expected_prev[26] !== 1'bx ) && ( enderecoPC_prev[26] !== enderecoPC_expected_prev[26] )
		&& ((enderecoPC_expected_prev[26] !== last_enderecoPC_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[26] = enderecoPC_expected_prev[26];
	end
	if (
		( enderecoPC_expected_prev[27] !== 1'bx ) && ( enderecoPC_prev[27] !== enderecoPC_expected_prev[27] )
		&& ((enderecoPC_expected_prev[27] !== last_enderecoPC_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[27] = enderecoPC_expected_prev[27];
	end
	if (
		( enderecoPC_expected_prev[28] !== 1'bx ) && ( enderecoPC_prev[28] !== enderecoPC_expected_prev[28] )
		&& ((enderecoPC_expected_prev[28] !== last_enderecoPC_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[28] = enderecoPC_expected_prev[28];
	end
	if (
		( enderecoPC_expected_prev[29] !== 1'bx ) && ( enderecoPC_prev[29] !== enderecoPC_expected_prev[29] )
		&& ((enderecoPC_expected_prev[29] !== last_enderecoPC_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[29] = enderecoPC_expected_prev[29];
	end
	if (
		( enderecoPC_expected_prev[30] !== 1'bx ) && ( enderecoPC_prev[30] !== enderecoPC_expected_prev[30] )
		&& ((enderecoPC_expected_prev[30] !== last_enderecoPC_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[30] = enderecoPC_expected_prev[30];
	end
	if (
		( enderecoPC_expected_prev[31] !== 1'bx ) && ( enderecoPC_prev[31] !== enderecoPC_expected_prev[31] )
		&& ((enderecoPC_expected_prev[31] !== last_enderecoPC_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoPC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoPC_expected_prev);
		$display ("     Real value = %b", enderecoPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_enderecoPC_exp[31] = enderecoPC_expected_prev[31];
	end
	if (
		( neg1_expected_prev !== 1'bx ) && ( neg1_prev !== neg1_expected_prev )
		&& ((neg1_expected_prev !== last_neg1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg1_expected_prev);
		$display ("     Real value = %b", neg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_neg1_exp = neg1_expected_prev;
	end
	if (
		( neg2_expected_prev !== 1'bx ) && ( neg2_prev !== neg2_expected_prev )
		&& ((neg2_expected_prev !== last_neg2_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg2_expected_prev);
		$display ("     Real value = %b", neg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_neg2_exp = neg2_expected_prev;
	end
	if (
		( neg3_expected_prev !== 1'bx ) && ( neg3_prev !== neg3_expected_prev )
		&& ((neg3_expected_prev !== last_neg3_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg3_expected_prev);
		$display ("     Real value = %b", neg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_neg3_exp = neg3_expected_prev;
	end
	if (
		( regEscrita_expected_prev[0] !== 1'bx ) && ( regEscrita_prev[0] !== regEscrita_expected_prev[0] )
		&& ((regEscrita_expected_prev[0] !== last_regEscrita_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regEscrita[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regEscrita_expected_prev);
		$display ("     Real value = %b", regEscrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regEscrita_exp[0] = regEscrita_expected_prev[0];
	end
	if (
		( regEscrita_expected_prev[1] !== 1'bx ) && ( regEscrita_prev[1] !== regEscrita_expected_prev[1] )
		&& ((regEscrita_expected_prev[1] !== last_regEscrita_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regEscrita[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regEscrita_expected_prev);
		$display ("     Real value = %b", regEscrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regEscrita_exp[1] = regEscrita_expected_prev[1];
	end
	if (
		( regEscrita_expected_prev[2] !== 1'bx ) && ( regEscrita_prev[2] !== regEscrita_expected_prev[2] )
		&& ((regEscrita_expected_prev[2] !== last_regEscrita_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regEscrita[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regEscrita_expected_prev);
		$display ("     Real value = %b", regEscrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regEscrita_exp[2] = regEscrita_expected_prev[2];
	end
	if (
		( regEscrita_expected_prev[3] !== 1'bx ) && ( regEscrita_prev[3] !== regEscrita_expected_prev[3] )
		&& ((regEscrita_expected_prev[3] !== last_regEscrita_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regEscrita[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regEscrita_expected_prev);
		$display ("     Real value = %b", regEscrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regEscrita_exp[3] = regEscrita_expected_prev[3];
	end
	if (
		( regEscrita_expected_prev[4] !== 1'bx ) && ( regEscrita_prev[4] !== regEscrita_expected_prev[4] )
		&& ((regEscrita_expected_prev[4] !== last_regEscrita_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regEscrita[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regEscrita_expected_prev);
		$display ("     Real value = %b", regEscrita_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_regEscrita_exp[4] = regEscrita_expected_prev[4];
	end
	if (
		( saidaULA_expected_prev[0] !== 1'bx ) && ( saidaULA_prev[0] !== saidaULA_expected_prev[0] )
		&& ((saidaULA_expected_prev[0] !== last_saidaULA_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[0] = saidaULA_expected_prev[0];
	end
	if (
		( saidaULA_expected_prev[1] !== 1'bx ) && ( saidaULA_prev[1] !== saidaULA_expected_prev[1] )
		&& ((saidaULA_expected_prev[1] !== last_saidaULA_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[1] = saidaULA_expected_prev[1];
	end
	if (
		( saidaULA_expected_prev[2] !== 1'bx ) && ( saidaULA_prev[2] !== saidaULA_expected_prev[2] )
		&& ((saidaULA_expected_prev[2] !== last_saidaULA_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[2] = saidaULA_expected_prev[2];
	end
	if (
		( saidaULA_expected_prev[3] !== 1'bx ) && ( saidaULA_prev[3] !== saidaULA_expected_prev[3] )
		&& ((saidaULA_expected_prev[3] !== last_saidaULA_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[3] = saidaULA_expected_prev[3];
	end
	if (
		( saidaULA_expected_prev[4] !== 1'bx ) && ( saidaULA_prev[4] !== saidaULA_expected_prev[4] )
		&& ((saidaULA_expected_prev[4] !== last_saidaULA_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[4] = saidaULA_expected_prev[4];
	end
	if (
		( saidaULA_expected_prev[5] !== 1'bx ) && ( saidaULA_prev[5] !== saidaULA_expected_prev[5] )
		&& ((saidaULA_expected_prev[5] !== last_saidaULA_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[5] = saidaULA_expected_prev[5];
	end
	if (
		( saidaULA_expected_prev[6] !== 1'bx ) && ( saidaULA_prev[6] !== saidaULA_expected_prev[6] )
		&& ((saidaULA_expected_prev[6] !== last_saidaULA_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[6] = saidaULA_expected_prev[6];
	end
	if (
		( saidaULA_expected_prev[7] !== 1'bx ) && ( saidaULA_prev[7] !== saidaULA_expected_prev[7] )
		&& ((saidaULA_expected_prev[7] !== last_saidaULA_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[7] = saidaULA_expected_prev[7];
	end
	if (
		( saidaULA_expected_prev[8] !== 1'bx ) && ( saidaULA_prev[8] !== saidaULA_expected_prev[8] )
		&& ((saidaULA_expected_prev[8] !== last_saidaULA_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[8] = saidaULA_expected_prev[8];
	end
	if (
		( saidaULA_expected_prev[9] !== 1'bx ) && ( saidaULA_prev[9] !== saidaULA_expected_prev[9] )
		&& ((saidaULA_expected_prev[9] !== last_saidaULA_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[9] = saidaULA_expected_prev[9];
	end
	if (
		( saidaULA_expected_prev[10] !== 1'bx ) && ( saidaULA_prev[10] !== saidaULA_expected_prev[10] )
		&& ((saidaULA_expected_prev[10] !== last_saidaULA_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[10] = saidaULA_expected_prev[10];
	end
	if (
		( saidaULA_expected_prev[11] !== 1'bx ) && ( saidaULA_prev[11] !== saidaULA_expected_prev[11] )
		&& ((saidaULA_expected_prev[11] !== last_saidaULA_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[11] = saidaULA_expected_prev[11];
	end
	if (
		( saidaULA_expected_prev[12] !== 1'bx ) && ( saidaULA_prev[12] !== saidaULA_expected_prev[12] )
		&& ((saidaULA_expected_prev[12] !== last_saidaULA_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[12] = saidaULA_expected_prev[12];
	end
	if (
		( saidaULA_expected_prev[13] !== 1'bx ) && ( saidaULA_prev[13] !== saidaULA_expected_prev[13] )
		&& ((saidaULA_expected_prev[13] !== last_saidaULA_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[13] = saidaULA_expected_prev[13];
	end
	if (
		( saidaULA_expected_prev[14] !== 1'bx ) && ( saidaULA_prev[14] !== saidaULA_expected_prev[14] )
		&& ((saidaULA_expected_prev[14] !== last_saidaULA_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[14] = saidaULA_expected_prev[14];
	end
	if (
		( saidaULA_expected_prev[15] !== 1'bx ) && ( saidaULA_prev[15] !== saidaULA_expected_prev[15] )
		&& ((saidaULA_expected_prev[15] !== last_saidaULA_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[15] = saidaULA_expected_prev[15];
	end
	if (
		( saidaULA_expected_prev[16] !== 1'bx ) && ( saidaULA_prev[16] !== saidaULA_expected_prev[16] )
		&& ((saidaULA_expected_prev[16] !== last_saidaULA_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[16] = saidaULA_expected_prev[16];
	end
	if (
		( saidaULA_expected_prev[17] !== 1'bx ) && ( saidaULA_prev[17] !== saidaULA_expected_prev[17] )
		&& ((saidaULA_expected_prev[17] !== last_saidaULA_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[17] = saidaULA_expected_prev[17];
	end
	if (
		( saidaULA_expected_prev[18] !== 1'bx ) && ( saidaULA_prev[18] !== saidaULA_expected_prev[18] )
		&& ((saidaULA_expected_prev[18] !== last_saidaULA_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[18] = saidaULA_expected_prev[18];
	end
	if (
		( saidaULA_expected_prev[19] !== 1'bx ) && ( saidaULA_prev[19] !== saidaULA_expected_prev[19] )
		&& ((saidaULA_expected_prev[19] !== last_saidaULA_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[19] = saidaULA_expected_prev[19];
	end
	if (
		( saidaULA_expected_prev[20] !== 1'bx ) && ( saidaULA_prev[20] !== saidaULA_expected_prev[20] )
		&& ((saidaULA_expected_prev[20] !== last_saidaULA_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[20] = saidaULA_expected_prev[20];
	end
	if (
		( saidaULA_expected_prev[21] !== 1'bx ) && ( saidaULA_prev[21] !== saidaULA_expected_prev[21] )
		&& ((saidaULA_expected_prev[21] !== last_saidaULA_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[21] = saidaULA_expected_prev[21];
	end
	if (
		( saidaULA_expected_prev[22] !== 1'bx ) && ( saidaULA_prev[22] !== saidaULA_expected_prev[22] )
		&& ((saidaULA_expected_prev[22] !== last_saidaULA_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[22] = saidaULA_expected_prev[22];
	end
	if (
		( saidaULA_expected_prev[23] !== 1'bx ) && ( saidaULA_prev[23] !== saidaULA_expected_prev[23] )
		&& ((saidaULA_expected_prev[23] !== last_saidaULA_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[23] = saidaULA_expected_prev[23];
	end
	if (
		( saidaULA_expected_prev[24] !== 1'bx ) && ( saidaULA_prev[24] !== saidaULA_expected_prev[24] )
		&& ((saidaULA_expected_prev[24] !== last_saidaULA_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[24] = saidaULA_expected_prev[24];
	end
	if (
		( saidaULA_expected_prev[25] !== 1'bx ) && ( saidaULA_prev[25] !== saidaULA_expected_prev[25] )
		&& ((saidaULA_expected_prev[25] !== last_saidaULA_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[25] = saidaULA_expected_prev[25];
	end
	if (
		( saidaULA_expected_prev[26] !== 1'bx ) && ( saidaULA_prev[26] !== saidaULA_expected_prev[26] )
		&& ((saidaULA_expected_prev[26] !== last_saidaULA_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[26] = saidaULA_expected_prev[26];
	end
	if (
		( saidaULA_expected_prev[27] !== 1'bx ) && ( saidaULA_prev[27] !== saidaULA_expected_prev[27] )
		&& ((saidaULA_expected_prev[27] !== last_saidaULA_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[27] = saidaULA_expected_prev[27];
	end
	if (
		( saidaULA_expected_prev[28] !== 1'bx ) && ( saidaULA_prev[28] !== saidaULA_expected_prev[28] )
		&& ((saidaULA_expected_prev[28] !== last_saidaULA_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[28] = saidaULA_expected_prev[28];
	end
	if (
		( saidaULA_expected_prev[29] !== 1'bx ) && ( saidaULA_prev[29] !== saidaULA_expected_prev[29] )
		&& ((saidaULA_expected_prev[29] !== last_saidaULA_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[29] = saidaULA_expected_prev[29];
	end
	if (
		( saidaULA_expected_prev[30] !== 1'bx ) && ( saidaULA_prev[30] !== saidaULA_expected_prev[30] )
		&& ((saidaULA_expected_prev[30] !== last_saidaULA_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[30] = saidaULA_expected_prev[30];
	end
	if (
		( saidaULA_expected_prev[31] !== 1'bx ) && ( saidaULA_prev[31] !== saidaULA_expected_prev[31] )
		&& ((saidaULA_expected_prev[31] !== last_saidaULA_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaULA_expected_prev);
		$display ("     Real value = %b", saidaULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_saidaULA_exp[31] = saidaULA_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg NegativoEx;
reg OpExt;
reg OpIO;
reg OpMem;
reg [2:0] OpSaida;
reg [4:0] OpULA;
reg OrigULA;
reg [1:0] PCDst;
reg RegDst;
reg clock;
reg [15:0] dadosExternos;
reg escreveReg;
reg halt;
reg jal;
reg reset;
// wires                                               
wire [31:0] dadosEscritaReg;
wire [3:0] display0;
wire [3:0] display1;
wire [3:0] display2;
wire [3:0] display3;
wire [3:0] display4;
wire [3:0] display5;
wire [3:0] display6;
wire [3:0] display7;
wire [31:0] endereco;
wire [31:0] enderecoPC;
wire neg1;
wire neg2;
wire neg3;
wire [4:0] regEscrita;
wire [31:0] saidaULA;

wire sampler;                             

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.NegativoEx(NegativoEx),
	.OpExt(OpExt),
	.OpIO(OpIO),
	.OpMem(OpMem),
	.OpSaida(OpSaida),
	.OpULA(OpULA),
	.OrigULA(OrigULA),
	.PCDst(PCDst),
	.RegDst(RegDst),
	.clock(clock),
	.dadosEscritaReg(dadosEscritaReg),
	.dadosExternos(dadosExternos),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.display6(display6),
	.display7(display7),
	.endereco(endereco),
	.enderecoPC(enderecoPC),
	.escreveReg(escreveReg),
	.halt(halt),
	.jal(jal),
	.neg1(neg1),
	.neg2(neg2),
	.neg3(neg3),
	.regEscrita(regEscrita),
	.reset(reset),
	.saidaULA(saidaULA)
);

// clock
initial
begin
	clock = 1'b1;
	# 20000;
	repeat(24)
	begin
		clock = 1'b0;
		clock = #20000 1'b1;
		# 20000;
	end
	clock = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
	reset = #500000 1'b1;
	reset = #40000 1'b0;
	reset = #40000 1'b1;
	reset = #50000 1'b0;
end 

// halt
initial
begin
	halt = 1'b0;
	halt = #480000 1'b1;
end 
// OpULA[ 4 ]
initial
begin
	OpULA[4] = 1'b0;
	OpULA[4] = #320000 1'b1;
	OpULA[4] = #80000 1'b0;
	OpULA[4] = #80000 1'b1;
end 
// OpULA[ 3 ]
initial
begin
	OpULA[3] = 1'b0;
	OpULA[3] = #240000 1'b1;
	OpULA[3] = #40000 1'b0;
	OpULA[3] = #200000 1'b1;
end 
// OpULA[ 2 ]
initial
begin
	OpULA[2] = 1'b0;
	OpULA[2] = #240000 1'b1;
	OpULA[2] = #40000 1'b0;
	OpULA[2] = #200000 1'b1;
end 
// OpULA[ 1 ]
initial
begin
	OpULA[1] = 1'b0;
	OpULA[1] = #80000 1'b1;
	OpULA[1] = #40000 1'b0;
	OpULA[1] = #360000 1'b1;
end 
// OpULA[ 0 ]
initial
begin
	OpULA[0] = 1'b0;
	OpULA[0] = #360000 1'b1;
	OpULA[0] = #40000 1'b0;
	OpULA[0] = #80000 1'b1;
end 
// dadosExternos[ 15 ]
initial
begin
	dadosExternos[15] = 1'b0;
end 
// dadosExternos[ 14 ]
initial
begin
	dadosExternos[14] = 1'b0;
end 
// dadosExternos[ 13 ]
initial
begin
	dadosExternos[13] = 1'b0;
end 
// dadosExternos[ 12 ]
initial
begin
	dadosExternos[12] = 1'b0;
end 
// dadosExternos[ 11 ]
initial
begin
	dadosExternos[11] = 1'b0;
end 
// dadosExternos[ 10 ]
initial
begin
	dadosExternos[10] = 1'b0;
end 
// dadosExternos[ 9 ]
initial
begin
	dadosExternos[9] = 1'b0;
end 
// dadosExternos[ 8 ]
initial
begin
	dadosExternos[8] = 1'b0;
end 
// dadosExternos[ 7 ]
initial
begin
	dadosExternos[7] = 1'b0;
end 
// dadosExternos[ 6 ]
initial
begin
	dadosExternos[6] = 1'b0;
end 
// dadosExternos[ 5 ]
initial
begin
	dadosExternos[5] = 1'b0;
end 
// dadosExternos[ 4 ]
initial
begin
	dadosExternos[4] = 1'b0;
end 
// dadosExternos[ 3 ]
initial
begin
	dadosExternos[3] = 1'b0;
	dadosExternos[3] = #280000 1'b1;
	dadosExternos[3] = #40000 1'b0;
end 
// dadosExternos[ 2 ]
initial
begin
	dadosExternos[2] = 1'b0;
end 
// dadosExternos[ 1 ]
initial
begin
	dadosExternos[1] = 1'b0;
end 
// dadosExternos[ 0 ]
initial
begin
	dadosExternos[0] = 1'b0;
	dadosExternos[0] = #280000 1'b1;
	dadosExternos[0] = #40000 1'b0;
end 

// OpIO
initial
begin
	OpIO = 1'b0;
	OpIO = #120000 1'b1;
	OpIO = #40000 1'b0;
	OpIO = #240000 1'b1;
	OpIO = #40000 1'b0;
end 

// OpMem
initial
begin
	OpMem = 1'b0;
	OpMem = #160000 1'b1;
	OpMem = #40000 1'b0;
end 

// escreveReg
initial
begin
	escreveReg = 1'b1;
	escreveReg = #120000 1'b0;
	escreveReg = #80000 1'b1;
	escreveReg = #160000 1'b0;
end 
// PCDst[ 1 ]
initial
begin
	PCDst[1] = 1'b0;
	PCDst[1] = #360000 1'b1;
	PCDst[1] = #40000 1'b0;
	PCDst[1] = #40000 1'b1;
	PCDst[1] = #40000 1'b0;
end 
// PCDst[ 0 ]
initial
begin
	PCDst[0] = 1'b0;
	PCDst[0] = #360000 1'b1;
	PCDst[0] = #40000 1'b0;
end 
// OpSaida[ 2 ]
initial
begin
	OpSaida[2] = 1'b1;
	OpSaida[2] = #80000 1'b0;
	OpSaida[2] = #400000 1'b1;
end 
// OpSaida[ 1 ]
initial
begin
	OpSaida[1] = 1'b0;
	OpSaida[1] = #80000 1'b1;
	OpSaida[1] = #40000 1'b0;
	OpSaida[1] = #80000 1'b1;
	OpSaida[1] = #80000 1'b0;
	OpSaida[1] = #40000 1'b1;
	OpSaida[1] = #40000 1'b0;
	OpSaida[1] = #120000 1'b1;
end 
// OpSaida[ 0 ]
initial
begin
	OpSaida[0] = 1'b0;
	OpSaida[0] = #80000 1'b1;
	OpSaida[0] = #40000 1'b0;
	OpSaida[0] = #120000 1'b1;
	OpSaida[0] = #120000 1'b0;
	OpSaida[0] = #120000 1'b1;
end 

// RegDst
initial
begin
	RegDst = 1'b0;
	RegDst = #240000 1'b1;
	RegDst = #40000 1'b0;
	RegDst = #40000 1'b1;
	RegDst = #80000 1'b0;
end 

// OrigULA
initial
begin
	OrigULA = 1'b1;
	OrigULA = #320000 1'b0;
	OrigULA = #80000 1'b1;
	OrigULA = #80000 1'b0;
end 

// OpExt
initial
begin
	OpExt = 1'b0;
end 

// jal
initial
begin
	jal = 1'b0;
end 

// NegativoEx
initial
begin
	NegativoEx = 1'b0;
end 

Processador_vlg_sample_tst tb_sample (
	.NegativoEx(NegativoEx),
	.OpExt(OpExt),
	.OpIO(OpIO),
	.OpMem(OpMem),
	.OpSaida(OpSaida),
	.OpULA(OpULA),
	.OrigULA(OrigULA),
	.PCDst(PCDst),
	.RegDst(RegDst),
	.clock(clock),
	.dadosExternos(dadosExternos),
	.escreveReg(escreveReg),
	.halt(halt),
	.jal(jal),
	.reset(reset),
	.sampler_tx(sampler)
);

Processador_vlg_check_tst tb_out(
	.dadosEscritaReg(dadosEscritaReg),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.display6(display6),
	.display7(display7),
	.endereco(endereco),
	.enderecoPC(enderecoPC),
	.neg1(neg1),
	.neg2(neg2),
	.neg3(neg3),
	.regEscrita(regEscrita),
	.saidaULA(saidaULA),
	.sampler_rx(sampler)
);
endmodule

