// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/01/2017 23:37:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BCD4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD4_vlg_sample_tst(
	numero,
	sampler_tx
);
input [31:0] numero;
output sampler_tx;

reg sample;
time current_time;
always @(numero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BCD4_vlg_check_tst (
	d1,
	d2,
	d3,
	d4,
	sampler_rx
);
input [3:0] d1;
input [3:0] d2;
input [3:0] d3;
input [3:0] d4;
input sampler_rx;

reg [3:0] d1_expected;
reg [3:0] d2_expected;
reg [3:0] d3_expected;
reg [3:0] d4_expected;

reg [3:0] d1_prev;
reg [3:0] d2_prev;
reg [3:0] d3_prev;
reg [3:0] d4_prev;

reg [3:0] d1_expected_prev;
reg [3:0] d2_expected_prev;
reg [3:0] d3_expected_prev;
reg [3:0] d4_expected_prev;

reg [3:0] last_d1_exp;
reg [3:0] last_d2_exp;
reg [3:0] last_d3_exp;
reg [3:0] last_d4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	d1_prev = d1;
	d2_prev = d2;
	d3_prev = d3;
	d4_prev = d4;
end

// update expected /o prevs

always @(trigger)
begin
	d1_expected_prev = d1_expected;
	d2_expected_prev = d2_expected;
	d3_expected_prev = d3_expected;
	d4_expected_prev = d4_expected;
end


// expected d1[ 3 ]
initial
begin
	d1_expected[3] = 1'bX;
end 
// expected d1[ 2 ]
initial
begin
	d1_expected[2] = 1'bX;
end 
// expected d1[ 1 ]
initial
begin
	d1_expected[1] = 1'bX;
end 
// expected d1[ 0 ]
initial
begin
	d1_expected[0] = 1'bX;
end 
// expected d2[ 3 ]
initial
begin
	d2_expected[3] = 1'bX;
end 
// expected d2[ 2 ]
initial
begin
	d2_expected[2] = 1'bX;
end 
// expected d2[ 1 ]
initial
begin
	d2_expected[1] = 1'bX;
end 
// expected d2[ 0 ]
initial
begin
	d2_expected[0] = 1'bX;
end 
// expected d3[ 3 ]
initial
begin
	d3_expected[3] = 1'bX;
end 
// expected d3[ 2 ]
initial
begin
	d3_expected[2] = 1'bX;
end 
// expected d3[ 1 ]
initial
begin
	d3_expected[1] = 1'bX;
end 
// expected d3[ 0 ]
initial
begin
	d3_expected[0] = 1'bX;
end 
// expected d4[ 3 ]
initial
begin
	d4_expected[3] = 1'bX;
end 
// expected d4[ 2 ]
initial
begin
	d4_expected[2] = 1'bX;
end 
// expected d4[ 1 ]
initial
begin
	d4_expected[1] = 1'bX;
end 
// expected d4[ 0 ]
initial
begin
	d4_expected[0] = 1'bX;
end 
// generate trigger
always @(d1_expected or d1 or d2_expected or d2 or d3_expected or d3 or d4_expected or d4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected d1 = %b | expected d2 = %b | expected d3 = %b | expected d4 = %b | ",d1_expected_prev,d2_expected_prev,d3_expected_prev,d4_expected_prev);
	$display("| real d1 = %b | real d2 = %b | real d3 = %b | real d4 = %b | ",d1_prev,d2_prev,d3_prev,d4_prev);
`endif
	if (
		( d1_expected_prev[0] !== 1'bx ) && ( d1_prev[0] !== d1_expected_prev[0] )
		&& ((d1_expected_prev[0] !== last_d1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d1_exp[0] = d1_expected_prev[0];
	end
	if (
		( d1_expected_prev[1] !== 1'bx ) && ( d1_prev[1] !== d1_expected_prev[1] )
		&& ((d1_expected_prev[1] !== last_d1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d1_exp[1] = d1_expected_prev[1];
	end
	if (
		( d1_expected_prev[2] !== 1'bx ) && ( d1_prev[2] !== d1_expected_prev[2] )
		&& ((d1_expected_prev[2] !== last_d1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d1_exp[2] = d1_expected_prev[2];
	end
	if (
		( d1_expected_prev[3] !== 1'bx ) && ( d1_prev[3] !== d1_expected_prev[3] )
		&& ((d1_expected_prev[3] !== last_d1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d1_exp[3] = d1_expected_prev[3];
	end
	if (
		( d2_expected_prev[0] !== 1'bx ) && ( d2_prev[0] !== d2_expected_prev[0] )
		&& ((d2_expected_prev[0] !== last_d2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d2_exp[0] = d2_expected_prev[0];
	end
	if (
		( d2_expected_prev[1] !== 1'bx ) && ( d2_prev[1] !== d2_expected_prev[1] )
		&& ((d2_expected_prev[1] !== last_d2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d2_exp[1] = d2_expected_prev[1];
	end
	if (
		( d2_expected_prev[2] !== 1'bx ) && ( d2_prev[2] !== d2_expected_prev[2] )
		&& ((d2_expected_prev[2] !== last_d2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d2_exp[2] = d2_expected_prev[2];
	end
	if (
		( d2_expected_prev[3] !== 1'bx ) && ( d2_prev[3] !== d2_expected_prev[3] )
		&& ((d2_expected_prev[3] !== last_d2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d2_exp[3] = d2_expected_prev[3];
	end
	if (
		( d3_expected_prev[0] !== 1'bx ) && ( d3_prev[0] !== d3_expected_prev[0] )
		&& ((d3_expected_prev[0] !== last_d3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d3_exp[0] = d3_expected_prev[0];
	end
	if (
		( d3_expected_prev[1] !== 1'bx ) && ( d3_prev[1] !== d3_expected_prev[1] )
		&& ((d3_expected_prev[1] !== last_d3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d3_exp[1] = d3_expected_prev[1];
	end
	if (
		( d3_expected_prev[2] !== 1'bx ) && ( d3_prev[2] !== d3_expected_prev[2] )
		&& ((d3_expected_prev[2] !== last_d3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d3_exp[2] = d3_expected_prev[2];
	end
	if (
		( d3_expected_prev[3] !== 1'bx ) && ( d3_prev[3] !== d3_expected_prev[3] )
		&& ((d3_expected_prev[3] !== last_d3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d3_exp[3] = d3_expected_prev[3];
	end
	if (
		( d4_expected_prev[0] !== 1'bx ) && ( d4_prev[0] !== d4_expected_prev[0] )
		&& ((d4_expected_prev[0] !== last_d4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d4_exp[0] = d4_expected_prev[0];
	end
	if (
		( d4_expected_prev[1] !== 1'bx ) && ( d4_prev[1] !== d4_expected_prev[1] )
		&& ((d4_expected_prev[1] !== last_d4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d4_exp[1] = d4_expected_prev[1];
	end
	if (
		( d4_expected_prev[2] !== 1'bx ) && ( d4_prev[2] !== d4_expected_prev[2] )
		&& ((d4_expected_prev[2] !== last_d4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d4_exp[2] = d4_expected_prev[2];
	end
	if (
		( d4_expected_prev[3] !== 1'bx ) && ( d4_prev[3] !== d4_expected_prev[3] )
		&& ((d4_expected_prev[3] !== last_d4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d4_exp[3] = d4_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BCD4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] numero;
// wires                                               
wire [3:0] d1;
wire [3:0] d2;
wire [3:0] d3;
wire [3:0] d4;

wire sampler;                             

// assign statements (if any)                          
BCD4 i1 (
// port map - connection between master ports and signals/registers   
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.numero(numero)
);
// numero[ 31 ]
initial
begin
	numero[31] = 1'b0;
end 
// numero[ 30 ]
initial
begin
	numero[30] = 1'b0;
end 
// numero[ 29 ]
initial
begin
	numero[29] = 1'b0;
end 
// numero[ 28 ]
initial
begin
	numero[28] = 1'b0;
end 
// numero[ 27 ]
initial
begin
	numero[27] = 1'b0;
end 
// numero[ 26 ]
initial
begin
	numero[26] = 1'b0;
end 
// numero[ 25 ]
initial
begin
	numero[25] = 1'b0;
end 
// numero[ 24 ]
initial
begin
	numero[24] = 1'b0;
end 
// numero[ 23 ]
initial
begin
	numero[23] = 1'b0;
end 
// numero[ 22 ]
initial
begin
	numero[22] = 1'b0;
end 
// numero[ 21 ]
initial
begin
	numero[21] = 1'b0;
end 
// numero[ 20 ]
initial
begin
	numero[20] = 1'b0;
end 
// numero[ 19 ]
initial
begin
	numero[19] = 1'b0;
end 
// numero[ 18 ]
initial
begin
	numero[18] = 1'b0;
end 
// numero[ 17 ]
initial
begin
	numero[17] = 1'b0;
end 
// numero[ 16 ]
initial
begin
	numero[16] = 1'b0;
end 
// numero[ 15 ]
initial
begin
	numero[15] = 1'b0;
end 
// numero[ 14 ]
initial
begin
	numero[14] = 1'b0;
end 
// numero[ 13 ]
initial
begin
	numero[13] = 1'b0;
end 
// numero[ 12 ]
initial
begin
	numero[12] = 1'b0;
end 
// numero[ 11 ]
initial
begin
	numero[11] = 1'b0;
end 
// numero[ 10 ]
initial
begin
	numero[10] = 1'b1;
end 
// numero[ 9 ]
initial
begin
	numero[9] = 1'b1;
end 
// numero[ 8 ]
initial
begin
	numero[8] = 1'b1;
end 
// numero[ 7 ]
initial
begin
	numero[7] = 1'b1;
end 
// numero[ 6 ]
initial
begin
	numero[6] = 1'b0;
end 
// numero[ 5 ]
initial
begin
	numero[5] = 1'b0;
end 
// numero[ 4 ]
initial
begin
	numero[4] = 1'b0;
end 
// numero[ 3 ]
initial
begin
	numero[3] = 1'b1;
end 
// numero[ 2 ]
initial
begin
	numero[2] = 1'b1;
end 
// numero[ 1 ]
initial
begin
	numero[1] = 1'b0;
end 
// numero[ 0 ]
initial
begin
	numero[0] = 1'b0;
end 

BCD4_vlg_sample_tst tb_sample (
	.numero(numero),
	.sampler_tx(sampler)
);

BCD4_vlg_check_tst tb_out(
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.sampler_rx(sampler)
);
endmodule

