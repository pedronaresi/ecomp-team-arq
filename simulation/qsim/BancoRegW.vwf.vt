// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2017 20:14:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BancoReg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BancoReg_vlg_sample_tst(
	clock,
	dadosEscrita,
	escreveReg,
	jal,
	reg1,
	reg2,
	regEscrita,
	sampler_tx
);
input  clock;
input [31:0] dadosEscrita;
input  escreveReg;
input  jal;
input [4:0] reg1;
input [4:0] reg2;
input [4:0] regEscrita;
output sampler_tx;

reg sample;
time current_time;
always @(clock or dadosEscrita or escreveReg or jal or reg1 or reg2 or regEscrita)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BancoReg_vlg_check_tst (
	dado1,
	dado2,
	sampler_rx
);
input [31:0] dado1;
input [31:0] dado2;
input sampler_rx;

reg [31:0] dado1_expected;
reg [31:0] dado2_expected;

reg [31:0] dado1_prev;
reg [31:0] dado2_prev;

reg [31:0] dado1_expected_prev;
reg [31:0] dado2_expected_prev;

reg [31:0] last_dado1_exp;
reg [31:0] last_dado2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dado1_prev = dado1;
	dado2_prev = dado2;
end

// update expected /o prevs

always @(trigger)
begin
	dado1_expected_prev = dado1_expected;
	dado2_expected_prev = dado2_expected;
end


// expected dado1[ 31 ]
initial
begin
	dado1_expected[31] = 1'bX;
end 
// expected dado1[ 30 ]
initial
begin
	dado1_expected[30] = 1'bX;
end 
// expected dado1[ 29 ]
initial
begin
	dado1_expected[29] = 1'bX;
end 
// expected dado1[ 28 ]
initial
begin
	dado1_expected[28] = 1'bX;
end 
// expected dado1[ 27 ]
initial
begin
	dado1_expected[27] = 1'bX;
end 
// expected dado1[ 26 ]
initial
begin
	dado1_expected[26] = 1'bX;
end 
// expected dado1[ 25 ]
initial
begin
	dado1_expected[25] = 1'bX;
end 
// expected dado1[ 24 ]
initial
begin
	dado1_expected[24] = 1'bX;
end 
// expected dado1[ 23 ]
initial
begin
	dado1_expected[23] = 1'bX;
end 
// expected dado1[ 22 ]
initial
begin
	dado1_expected[22] = 1'bX;
end 
// expected dado1[ 21 ]
initial
begin
	dado1_expected[21] = 1'bX;
end 
// expected dado1[ 20 ]
initial
begin
	dado1_expected[20] = 1'bX;
end 
// expected dado1[ 19 ]
initial
begin
	dado1_expected[19] = 1'bX;
end 
// expected dado1[ 18 ]
initial
begin
	dado1_expected[18] = 1'bX;
end 
// expected dado1[ 17 ]
initial
begin
	dado1_expected[17] = 1'bX;
end 
// expected dado1[ 16 ]
initial
begin
	dado1_expected[16] = 1'bX;
end 
// expected dado1[ 15 ]
initial
begin
	dado1_expected[15] = 1'bX;
end 
// expected dado1[ 14 ]
initial
begin
	dado1_expected[14] = 1'bX;
end 
// expected dado1[ 13 ]
initial
begin
	dado1_expected[13] = 1'bX;
end 
// expected dado1[ 12 ]
initial
begin
	dado1_expected[12] = 1'bX;
end 
// expected dado1[ 11 ]
initial
begin
	dado1_expected[11] = 1'bX;
end 
// expected dado1[ 10 ]
initial
begin
	dado1_expected[10] = 1'bX;
end 
// expected dado1[ 9 ]
initial
begin
	dado1_expected[9] = 1'bX;
end 
// expected dado1[ 8 ]
initial
begin
	dado1_expected[8] = 1'bX;
end 
// expected dado1[ 7 ]
initial
begin
	dado1_expected[7] = 1'bX;
end 
// expected dado1[ 6 ]
initial
begin
	dado1_expected[6] = 1'bX;
end 
// expected dado1[ 5 ]
initial
begin
	dado1_expected[5] = 1'bX;
end 
// expected dado1[ 4 ]
initial
begin
	dado1_expected[4] = 1'bX;
end 
// expected dado1[ 3 ]
initial
begin
	dado1_expected[3] = 1'bX;
end 
// expected dado1[ 2 ]
initial
begin
	dado1_expected[2] = 1'bX;
end 
// expected dado1[ 1 ]
initial
begin
	dado1_expected[1] = 1'bX;
end 
// expected dado1[ 0 ]
initial
begin
	dado1_expected[0] = 1'bX;
end 
// expected dado2[ 31 ]
initial
begin
	dado2_expected[31] = 1'bX;
end 
// expected dado2[ 30 ]
initial
begin
	dado2_expected[30] = 1'bX;
end 
// expected dado2[ 29 ]
initial
begin
	dado2_expected[29] = 1'bX;
end 
// expected dado2[ 28 ]
initial
begin
	dado2_expected[28] = 1'bX;
end 
// expected dado2[ 27 ]
initial
begin
	dado2_expected[27] = 1'bX;
end 
// expected dado2[ 26 ]
initial
begin
	dado2_expected[26] = 1'bX;
end 
// expected dado2[ 25 ]
initial
begin
	dado2_expected[25] = 1'bX;
end 
// expected dado2[ 24 ]
initial
begin
	dado2_expected[24] = 1'bX;
end 
// expected dado2[ 23 ]
initial
begin
	dado2_expected[23] = 1'bX;
end 
// expected dado2[ 22 ]
initial
begin
	dado2_expected[22] = 1'bX;
end 
// expected dado2[ 21 ]
initial
begin
	dado2_expected[21] = 1'bX;
end 
// expected dado2[ 20 ]
initial
begin
	dado2_expected[20] = 1'bX;
end 
// expected dado2[ 19 ]
initial
begin
	dado2_expected[19] = 1'bX;
end 
// expected dado2[ 18 ]
initial
begin
	dado2_expected[18] = 1'bX;
end 
// expected dado2[ 17 ]
initial
begin
	dado2_expected[17] = 1'bX;
end 
// expected dado2[ 16 ]
initial
begin
	dado2_expected[16] = 1'bX;
end 
// expected dado2[ 15 ]
initial
begin
	dado2_expected[15] = 1'bX;
end 
// expected dado2[ 14 ]
initial
begin
	dado2_expected[14] = 1'bX;
end 
// expected dado2[ 13 ]
initial
begin
	dado2_expected[13] = 1'bX;
end 
// expected dado2[ 12 ]
initial
begin
	dado2_expected[12] = 1'bX;
end 
// expected dado2[ 11 ]
initial
begin
	dado2_expected[11] = 1'bX;
end 
// expected dado2[ 10 ]
initial
begin
	dado2_expected[10] = 1'bX;
end 
// expected dado2[ 9 ]
initial
begin
	dado2_expected[9] = 1'bX;
end 
// expected dado2[ 8 ]
initial
begin
	dado2_expected[8] = 1'bX;
end 
// expected dado2[ 7 ]
initial
begin
	dado2_expected[7] = 1'bX;
end 
// expected dado2[ 6 ]
initial
begin
	dado2_expected[6] = 1'bX;
end 
// expected dado2[ 5 ]
initial
begin
	dado2_expected[5] = 1'bX;
end 
// expected dado2[ 4 ]
initial
begin
	dado2_expected[4] = 1'bX;
end 
// expected dado2[ 3 ]
initial
begin
	dado2_expected[3] = 1'bX;
end 
// expected dado2[ 2 ]
initial
begin
	dado2_expected[2] = 1'bX;
end 
// expected dado2[ 1 ]
initial
begin
	dado2_expected[1] = 1'bX;
end 
// expected dado2[ 0 ]
initial
begin
	dado2_expected[0] = 1'bX;
end 
// generate trigger
always @(dado1_expected or dado1 or dado2_expected or dado2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dado1 = %b | expected dado2 = %b | ",dado1_expected_prev,dado2_expected_prev);
	$display("| real dado1 = %b | real dado2 = %b | ",dado1_prev,dado2_prev);
`endif
	if (
		( dado1_expected_prev[0] !== 1'bx ) && ( dado1_prev[0] !== dado1_expected_prev[0] )
		&& ((dado1_expected_prev[0] !== last_dado1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[0] = dado1_expected_prev[0];
	end
	if (
		( dado1_expected_prev[1] !== 1'bx ) && ( dado1_prev[1] !== dado1_expected_prev[1] )
		&& ((dado1_expected_prev[1] !== last_dado1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[1] = dado1_expected_prev[1];
	end
	if (
		( dado1_expected_prev[2] !== 1'bx ) && ( dado1_prev[2] !== dado1_expected_prev[2] )
		&& ((dado1_expected_prev[2] !== last_dado1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[2] = dado1_expected_prev[2];
	end
	if (
		( dado1_expected_prev[3] !== 1'bx ) && ( dado1_prev[3] !== dado1_expected_prev[3] )
		&& ((dado1_expected_prev[3] !== last_dado1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[3] = dado1_expected_prev[3];
	end
	if (
		( dado1_expected_prev[4] !== 1'bx ) && ( dado1_prev[4] !== dado1_expected_prev[4] )
		&& ((dado1_expected_prev[4] !== last_dado1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[4] = dado1_expected_prev[4];
	end
	if (
		( dado1_expected_prev[5] !== 1'bx ) && ( dado1_prev[5] !== dado1_expected_prev[5] )
		&& ((dado1_expected_prev[5] !== last_dado1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[5] = dado1_expected_prev[5];
	end
	if (
		( dado1_expected_prev[6] !== 1'bx ) && ( dado1_prev[6] !== dado1_expected_prev[6] )
		&& ((dado1_expected_prev[6] !== last_dado1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[6] = dado1_expected_prev[6];
	end
	if (
		( dado1_expected_prev[7] !== 1'bx ) && ( dado1_prev[7] !== dado1_expected_prev[7] )
		&& ((dado1_expected_prev[7] !== last_dado1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[7] = dado1_expected_prev[7];
	end
	if (
		( dado1_expected_prev[8] !== 1'bx ) && ( dado1_prev[8] !== dado1_expected_prev[8] )
		&& ((dado1_expected_prev[8] !== last_dado1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[8] = dado1_expected_prev[8];
	end
	if (
		( dado1_expected_prev[9] !== 1'bx ) && ( dado1_prev[9] !== dado1_expected_prev[9] )
		&& ((dado1_expected_prev[9] !== last_dado1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[9] = dado1_expected_prev[9];
	end
	if (
		( dado1_expected_prev[10] !== 1'bx ) && ( dado1_prev[10] !== dado1_expected_prev[10] )
		&& ((dado1_expected_prev[10] !== last_dado1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[10] = dado1_expected_prev[10];
	end
	if (
		( dado1_expected_prev[11] !== 1'bx ) && ( dado1_prev[11] !== dado1_expected_prev[11] )
		&& ((dado1_expected_prev[11] !== last_dado1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[11] = dado1_expected_prev[11];
	end
	if (
		( dado1_expected_prev[12] !== 1'bx ) && ( dado1_prev[12] !== dado1_expected_prev[12] )
		&& ((dado1_expected_prev[12] !== last_dado1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[12] = dado1_expected_prev[12];
	end
	if (
		( dado1_expected_prev[13] !== 1'bx ) && ( dado1_prev[13] !== dado1_expected_prev[13] )
		&& ((dado1_expected_prev[13] !== last_dado1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[13] = dado1_expected_prev[13];
	end
	if (
		( dado1_expected_prev[14] !== 1'bx ) && ( dado1_prev[14] !== dado1_expected_prev[14] )
		&& ((dado1_expected_prev[14] !== last_dado1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[14] = dado1_expected_prev[14];
	end
	if (
		( dado1_expected_prev[15] !== 1'bx ) && ( dado1_prev[15] !== dado1_expected_prev[15] )
		&& ((dado1_expected_prev[15] !== last_dado1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[15] = dado1_expected_prev[15];
	end
	if (
		( dado1_expected_prev[16] !== 1'bx ) && ( dado1_prev[16] !== dado1_expected_prev[16] )
		&& ((dado1_expected_prev[16] !== last_dado1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[16] = dado1_expected_prev[16];
	end
	if (
		( dado1_expected_prev[17] !== 1'bx ) && ( dado1_prev[17] !== dado1_expected_prev[17] )
		&& ((dado1_expected_prev[17] !== last_dado1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[17] = dado1_expected_prev[17];
	end
	if (
		( dado1_expected_prev[18] !== 1'bx ) && ( dado1_prev[18] !== dado1_expected_prev[18] )
		&& ((dado1_expected_prev[18] !== last_dado1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[18] = dado1_expected_prev[18];
	end
	if (
		( dado1_expected_prev[19] !== 1'bx ) && ( dado1_prev[19] !== dado1_expected_prev[19] )
		&& ((dado1_expected_prev[19] !== last_dado1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[19] = dado1_expected_prev[19];
	end
	if (
		( dado1_expected_prev[20] !== 1'bx ) && ( dado1_prev[20] !== dado1_expected_prev[20] )
		&& ((dado1_expected_prev[20] !== last_dado1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[20] = dado1_expected_prev[20];
	end
	if (
		( dado1_expected_prev[21] !== 1'bx ) && ( dado1_prev[21] !== dado1_expected_prev[21] )
		&& ((dado1_expected_prev[21] !== last_dado1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[21] = dado1_expected_prev[21];
	end
	if (
		( dado1_expected_prev[22] !== 1'bx ) && ( dado1_prev[22] !== dado1_expected_prev[22] )
		&& ((dado1_expected_prev[22] !== last_dado1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[22] = dado1_expected_prev[22];
	end
	if (
		( dado1_expected_prev[23] !== 1'bx ) && ( dado1_prev[23] !== dado1_expected_prev[23] )
		&& ((dado1_expected_prev[23] !== last_dado1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[23] = dado1_expected_prev[23];
	end
	if (
		( dado1_expected_prev[24] !== 1'bx ) && ( dado1_prev[24] !== dado1_expected_prev[24] )
		&& ((dado1_expected_prev[24] !== last_dado1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[24] = dado1_expected_prev[24];
	end
	if (
		( dado1_expected_prev[25] !== 1'bx ) && ( dado1_prev[25] !== dado1_expected_prev[25] )
		&& ((dado1_expected_prev[25] !== last_dado1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[25] = dado1_expected_prev[25];
	end
	if (
		( dado1_expected_prev[26] !== 1'bx ) && ( dado1_prev[26] !== dado1_expected_prev[26] )
		&& ((dado1_expected_prev[26] !== last_dado1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[26] = dado1_expected_prev[26];
	end
	if (
		( dado1_expected_prev[27] !== 1'bx ) && ( dado1_prev[27] !== dado1_expected_prev[27] )
		&& ((dado1_expected_prev[27] !== last_dado1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[27] = dado1_expected_prev[27];
	end
	if (
		( dado1_expected_prev[28] !== 1'bx ) && ( dado1_prev[28] !== dado1_expected_prev[28] )
		&& ((dado1_expected_prev[28] !== last_dado1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[28] = dado1_expected_prev[28];
	end
	if (
		( dado1_expected_prev[29] !== 1'bx ) && ( dado1_prev[29] !== dado1_expected_prev[29] )
		&& ((dado1_expected_prev[29] !== last_dado1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[29] = dado1_expected_prev[29];
	end
	if (
		( dado1_expected_prev[30] !== 1'bx ) && ( dado1_prev[30] !== dado1_expected_prev[30] )
		&& ((dado1_expected_prev[30] !== last_dado1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[30] = dado1_expected_prev[30];
	end
	if (
		( dado1_expected_prev[31] !== 1'bx ) && ( dado1_prev[31] !== dado1_expected_prev[31] )
		&& ((dado1_expected_prev[31] !== last_dado1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado1_expected_prev);
		$display ("     Real value = %b", dado1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado1_exp[31] = dado1_expected_prev[31];
	end
	if (
		( dado2_expected_prev[0] !== 1'bx ) && ( dado2_prev[0] !== dado2_expected_prev[0] )
		&& ((dado2_expected_prev[0] !== last_dado2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[0] = dado2_expected_prev[0];
	end
	if (
		( dado2_expected_prev[1] !== 1'bx ) && ( dado2_prev[1] !== dado2_expected_prev[1] )
		&& ((dado2_expected_prev[1] !== last_dado2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[1] = dado2_expected_prev[1];
	end
	if (
		( dado2_expected_prev[2] !== 1'bx ) && ( dado2_prev[2] !== dado2_expected_prev[2] )
		&& ((dado2_expected_prev[2] !== last_dado2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[2] = dado2_expected_prev[2];
	end
	if (
		( dado2_expected_prev[3] !== 1'bx ) && ( dado2_prev[3] !== dado2_expected_prev[3] )
		&& ((dado2_expected_prev[3] !== last_dado2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[3] = dado2_expected_prev[3];
	end
	if (
		( dado2_expected_prev[4] !== 1'bx ) && ( dado2_prev[4] !== dado2_expected_prev[4] )
		&& ((dado2_expected_prev[4] !== last_dado2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[4] = dado2_expected_prev[4];
	end
	if (
		( dado2_expected_prev[5] !== 1'bx ) && ( dado2_prev[5] !== dado2_expected_prev[5] )
		&& ((dado2_expected_prev[5] !== last_dado2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[5] = dado2_expected_prev[5];
	end
	if (
		( dado2_expected_prev[6] !== 1'bx ) && ( dado2_prev[6] !== dado2_expected_prev[6] )
		&& ((dado2_expected_prev[6] !== last_dado2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[6] = dado2_expected_prev[6];
	end
	if (
		( dado2_expected_prev[7] !== 1'bx ) && ( dado2_prev[7] !== dado2_expected_prev[7] )
		&& ((dado2_expected_prev[7] !== last_dado2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[7] = dado2_expected_prev[7];
	end
	if (
		( dado2_expected_prev[8] !== 1'bx ) && ( dado2_prev[8] !== dado2_expected_prev[8] )
		&& ((dado2_expected_prev[8] !== last_dado2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[8] = dado2_expected_prev[8];
	end
	if (
		( dado2_expected_prev[9] !== 1'bx ) && ( dado2_prev[9] !== dado2_expected_prev[9] )
		&& ((dado2_expected_prev[9] !== last_dado2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[9] = dado2_expected_prev[9];
	end
	if (
		( dado2_expected_prev[10] !== 1'bx ) && ( dado2_prev[10] !== dado2_expected_prev[10] )
		&& ((dado2_expected_prev[10] !== last_dado2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[10] = dado2_expected_prev[10];
	end
	if (
		( dado2_expected_prev[11] !== 1'bx ) && ( dado2_prev[11] !== dado2_expected_prev[11] )
		&& ((dado2_expected_prev[11] !== last_dado2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[11] = dado2_expected_prev[11];
	end
	if (
		( dado2_expected_prev[12] !== 1'bx ) && ( dado2_prev[12] !== dado2_expected_prev[12] )
		&& ((dado2_expected_prev[12] !== last_dado2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[12] = dado2_expected_prev[12];
	end
	if (
		( dado2_expected_prev[13] !== 1'bx ) && ( dado2_prev[13] !== dado2_expected_prev[13] )
		&& ((dado2_expected_prev[13] !== last_dado2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[13] = dado2_expected_prev[13];
	end
	if (
		( dado2_expected_prev[14] !== 1'bx ) && ( dado2_prev[14] !== dado2_expected_prev[14] )
		&& ((dado2_expected_prev[14] !== last_dado2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[14] = dado2_expected_prev[14];
	end
	if (
		( dado2_expected_prev[15] !== 1'bx ) && ( dado2_prev[15] !== dado2_expected_prev[15] )
		&& ((dado2_expected_prev[15] !== last_dado2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[15] = dado2_expected_prev[15];
	end
	if (
		( dado2_expected_prev[16] !== 1'bx ) && ( dado2_prev[16] !== dado2_expected_prev[16] )
		&& ((dado2_expected_prev[16] !== last_dado2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[16] = dado2_expected_prev[16];
	end
	if (
		( dado2_expected_prev[17] !== 1'bx ) && ( dado2_prev[17] !== dado2_expected_prev[17] )
		&& ((dado2_expected_prev[17] !== last_dado2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[17] = dado2_expected_prev[17];
	end
	if (
		( dado2_expected_prev[18] !== 1'bx ) && ( dado2_prev[18] !== dado2_expected_prev[18] )
		&& ((dado2_expected_prev[18] !== last_dado2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[18] = dado2_expected_prev[18];
	end
	if (
		( dado2_expected_prev[19] !== 1'bx ) && ( dado2_prev[19] !== dado2_expected_prev[19] )
		&& ((dado2_expected_prev[19] !== last_dado2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[19] = dado2_expected_prev[19];
	end
	if (
		( dado2_expected_prev[20] !== 1'bx ) && ( dado2_prev[20] !== dado2_expected_prev[20] )
		&& ((dado2_expected_prev[20] !== last_dado2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[20] = dado2_expected_prev[20];
	end
	if (
		( dado2_expected_prev[21] !== 1'bx ) && ( dado2_prev[21] !== dado2_expected_prev[21] )
		&& ((dado2_expected_prev[21] !== last_dado2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[21] = dado2_expected_prev[21];
	end
	if (
		( dado2_expected_prev[22] !== 1'bx ) && ( dado2_prev[22] !== dado2_expected_prev[22] )
		&& ((dado2_expected_prev[22] !== last_dado2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[22] = dado2_expected_prev[22];
	end
	if (
		( dado2_expected_prev[23] !== 1'bx ) && ( dado2_prev[23] !== dado2_expected_prev[23] )
		&& ((dado2_expected_prev[23] !== last_dado2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[23] = dado2_expected_prev[23];
	end
	if (
		( dado2_expected_prev[24] !== 1'bx ) && ( dado2_prev[24] !== dado2_expected_prev[24] )
		&& ((dado2_expected_prev[24] !== last_dado2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[24] = dado2_expected_prev[24];
	end
	if (
		( dado2_expected_prev[25] !== 1'bx ) && ( dado2_prev[25] !== dado2_expected_prev[25] )
		&& ((dado2_expected_prev[25] !== last_dado2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[25] = dado2_expected_prev[25];
	end
	if (
		( dado2_expected_prev[26] !== 1'bx ) && ( dado2_prev[26] !== dado2_expected_prev[26] )
		&& ((dado2_expected_prev[26] !== last_dado2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[26] = dado2_expected_prev[26];
	end
	if (
		( dado2_expected_prev[27] !== 1'bx ) && ( dado2_prev[27] !== dado2_expected_prev[27] )
		&& ((dado2_expected_prev[27] !== last_dado2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[27] = dado2_expected_prev[27];
	end
	if (
		( dado2_expected_prev[28] !== 1'bx ) && ( dado2_prev[28] !== dado2_expected_prev[28] )
		&& ((dado2_expected_prev[28] !== last_dado2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[28] = dado2_expected_prev[28];
	end
	if (
		( dado2_expected_prev[29] !== 1'bx ) && ( dado2_prev[29] !== dado2_expected_prev[29] )
		&& ((dado2_expected_prev[29] !== last_dado2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[29] = dado2_expected_prev[29];
	end
	if (
		( dado2_expected_prev[30] !== 1'bx ) && ( dado2_prev[30] !== dado2_expected_prev[30] )
		&& ((dado2_expected_prev[30] !== last_dado2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[30] = dado2_expected_prev[30];
	end
	if (
		( dado2_expected_prev[31] !== 1'bx ) && ( dado2_prev[31] !== dado2_expected_prev[31] )
		&& ((dado2_expected_prev[31] !== last_dado2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado2_expected_prev);
		$display ("     Real value = %b", dado2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dado2_exp[31] = dado2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BancoReg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] dadosEscrita;
reg escreveReg;
reg jal;
reg [4:0] reg1;
reg [4:0] reg2;
reg [4:0] regEscrita;
// wires                                               
wire [31:0] dado1;
wire [31:0] dado2;

wire sampler;                             

// assign statements (if any)                          
BancoReg i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dado1(dado1),
	.dado2(dado2),
	.dadosEscrita(dadosEscrita),
	.escreveReg(escreveReg),
	.jal(jal),
	.reg1(reg1),
	.reg2(reg2),
	.regEscrita(regEscrita)
);

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	clock = #70000 1'b0;
	clock = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		clock = 1'b0;
		clock = #80000 1'b1;
		# 80000;
	end
	clock = 1'b0;
	clock = #80000 1'b1;
end 

// escreveReg
initial
begin
	escreveReg = 1'b1;
	escreveReg = #310000 1'b0;
	escreveReg = #160000 1'b1;
end 

// jal
initial
begin
	jal = 1'b0;
	jal = #310000 1'b1;
	jal = #160000 1'b0;
end 
// reg1[ 4 ]
initial
begin
	reg1[4] = 1'b0;
	reg1[4] = #640000 1'b1;
	reg1[4] = #160000 1'b0;
end 
// reg1[ 3 ]
initial
begin
	reg1[3] = 1'b0;
	reg1[3] = #640000 1'b1;
	reg1[3] = #160000 1'b0;
end 
// reg1[ 2 ]
initial
begin
	reg1[2] = 1'b0;
	reg1[2] = #640000 1'b1;
	reg1[2] = #160000 1'b0;
end 
// reg1[ 1 ]
initial
begin
	reg1[1] = 1'b0;
	reg1[1] = #640000 1'b1;
	reg1[1] = #160000 1'b0;
end 
// reg1[ 0 ]
initial
begin
	reg1[0] = 1'b0;
	reg1[0] = #480000 1'b1;
	reg1[0] = #320000 1'b0;
end 
// reg2[ 4 ]
initial
begin
	reg2[4] = 1'b0;
end 
// reg2[ 3 ]
initial
begin
	reg2[3] = 1'b0;
end 
// reg2[ 2 ]
initial
begin
	reg2[2] = 1'b0;
end 
// reg2[ 1 ]
initial
begin
	reg2[1] = 1'b0;
	reg2[1] = #480000 1'b1;
	reg2[1] = #160000 1'b0;
end 
// reg2[ 0 ]
initial
begin
	reg2[0] = 1'b0;
end 
// regEscrita[ 4 ]
initial
begin
	regEscrita[4] = 1'b0;
end 
// regEscrita[ 3 ]
initial
begin
	regEscrita[3] = 1'b0;
end 
// regEscrita[ 2 ]
initial
begin
	regEscrita[2] = 1'b0;
end 
// regEscrita[ 1 ]
initial
begin
	regEscrita[1] = 1'b0;
	regEscrita[1] = #150000 1'b1;
	regEscrita[1] = #160000 1'b0;
end 
// regEscrita[ 0 ]
initial
begin
	regEscrita[0] = 1'b1;
	regEscrita[0] = #150000 1'b0;
end 
// dadosEscrita[ 31 ]
initial
begin
	dadosEscrita[31] = 1'b0;
	dadosEscrita[31] = #150000 1'b1;
	dadosEscrita[31] = #160000 1'b0;
end 
// dadosEscrita[ 30 ]
initial
begin
	dadosEscrita[30] = 1'b0;
	dadosEscrita[30] = #150000 1'b1;
	dadosEscrita[30] = #160000 1'b0;
end 
// dadosEscrita[ 29 ]
initial
begin
	dadosEscrita[29] = 1'b0;
	dadosEscrita[29] = #150000 1'b1;
	dadosEscrita[29] = #160000 1'b0;
end 
// dadosEscrita[ 28 ]
initial
begin
	dadosEscrita[28] = 1'b0;
	dadosEscrita[28] = #150000 1'b1;
	dadosEscrita[28] = #160000 1'b0;
end 
// dadosEscrita[ 27 ]
initial
begin
	dadosEscrita[27] = 1'b0;
	dadosEscrita[27] = #150000 1'b1;
	dadosEscrita[27] = #160000 1'b0;
end 
// dadosEscrita[ 26 ]
initial
begin
	dadosEscrita[26] = 1'b0;
	dadosEscrita[26] = #150000 1'b1;
	dadosEscrita[26] = #160000 1'b0;
end 
// dadosEscrita[ 25 ]
initial
begin
	dadosEscrita[25] = 1'b0;
	dadosEscrita[25] = #150000 1'b1;
	dadosEscrita[25] = #160000 1'b0;
end 
// dadosEscrita[ 24 ]
initial
begin
	dadosEscrita[24] = 1'b0;
	dadosEscrita[24] = #150000 1'b1;
	dadosEscrita[24] = #160000 1'b0;
end 
// dadosEscrita[ 23 ]
initial
begin
	dadosEscrita[23] = 1'b0;
	dadosEscrita[23] = #150000 1'b1;
	dadosEscrita[23] = #160000 1'b0;
end 
// dadosEscrita[ 22 ]
initial
begin
	dadosEscrita[22] = 1'b0;
	dadosEscrita[22] = #150000 1'b1;
	dadosEscrita[22] = #160000 1'b0;
end 
// dadosEscrita[ 21 ]
initial
begin
	dadosEscrita[21] = 1'b0;
	dadosEscrita[21] = #150000 1'b1;
	dadosEscrita[21] = #160000 1'b0;
end 
// dadosEscrita[ 20 ]
initial
begin
	dadosEscrita[20] = 1'b0;
	dadosEscrita[20] = #150000 1'b1;
	dadosEscrita[20] = #160000 1'b0;
end 
// dadosEscrita[ 19 ]
initial
begin
	dadosEscrita[19] = 1'b0;
	dadosEscrita[19] = #150000 1'b1;
	dadosEscrita[19] = #160000 1'b0;
end 
// dadosEscrita[ 18 ]
initial
begin
	dadosEscrita[18] = 1'b0;
	dadosEscrita[18] = #150000 1'b1;
	dadosEscrita[18] = #160000 1'b0;
end 
// dadosEscrita[ 17 ]
initial
begin
	dadosEscrita[17] = 1'b0;
	dadosEscrita[17] = #150000 1'b1;
	dadosEscrita[17] = #160000 1'b0;
end 
// dadosEscrita[ 16 ]
initial
begin
	dadosEscrita[16] = 1'b0;
	dadosEscrita[16] = #150000 1'b1;
	dadosEscrita[16] = #160000 1'b0;
end 
// dadosEscrita[ 15 ]
initial
begin
	dadosEscrita[15] = 1'b0;
	dadosEscrita[15] = #150000 1'b1;
	dadosEscrita[15] = #160000 1'b0;
end 
// dadosEscrita[ 14 ]
initial
begin
	dadosEscrita[14] = 1'b0;
	dadosEscrita[14] = #150000 1'b1;
	dadosEscrita[14] = #160000 1'b0;
end 
// dadosEscrita[ 13 ]
initial
begin
	dadosEscrita[13] = 1'b0;
	dadosEscrita[13] = #150000 1'b1;
	dadosEscrita[13] = #160000 1'b0;
end 
// dadosEscrita[ 12 ]
initial
begin
	dadosEscrita[12] = 1'b0;
	dadosEscrita[12] = #150000 1'b1;
	dadosEscrita[12] = #160000 1'b0;
end 
// dadosEscrita[ 11 ]
initial
begin
	dadosEscrita[11] = 1'b0;
	dadosEscrita[11] = #150000 1'b1;
	dadosEscrita[11] = #160000 1'b0;
end 
// dadosEscrita[ 10 ]
initial
begin
	dadosEscrita[10] = 1'b0;
	dadosEscrita[10] = #150000 1'b1;
	dadosEscrita[10] = #160000 1'b0;
end 
// dadosEscrita[ 9 ]
initial
begin
	dadosEscrita[9] = 1'b0;
	dadosEscrita[9] = #150000 1'b1;
	dadosEscrita[9] = #160000 1'b0;
end 
// dadosEscrita[ 8 ]
initial
begin
	dadosEscrita[8] = 1'b0;
	dadosEscrita[8] = #150000 1'b1;
	dadosEscrita[8] = #160000 1'b0;
end 
// dadosEscrita[ 7 ]
initial
begin
	dadosEscrita[7] = 1'b0;
	dadosEscrita[7] = #150000 1'b1;
	dadosEscrita[7] = #160000 1'b0;
end 
// dadosEscrita[ 6 ]
initial
begin
	dadosEscrita[6] = 1'b0;
	dadosEscrita[6] = #150000 1'b1;
	dadosEscrita[6] = #160000 1'b0;
end 
// dadosEscrita[ 5 ]
initial
begin
	dadosEscrita[5] = 1'b0;
	dadosEscrita[5] = #150000 1'b1;
	dadosEscrita[5] = #160000 1'b0;
end 
// dadosEscrita[ 4 ]
initial
begin
	dadosEscrita[4] = 1'b0;
	dadosEscrita[4] = #150000 1'b1;
	dadosEscrita[4] = #160000 1'b0;
end 
// dadosEscrita[ 3 ]
initial
begin
	dadosEscrita[3] = 1'b0;
	dadosEscrita[3] = #150000 1'b1;
	dadosEscrita[3] = #320000 1'b0;
end 
// dadosEscrita[ 2 ]
initial
begin
	dadosEscrita[2] = 1'b0;
	dadosEscrita[2] = #150000 1'b1;
	dadosEscrita[2] = #320000 1'b0;
end 
// dadosEscrita[ 1 ]
initial
begin
	dadosEscrita[1] = 1'b0;
	dadosEscrita[1] = #150000 1'b1;
	dadosEscrita[1] = #320000 1'b0;
end 
// dadosEscrita[ 0 ]
initial
begin
	dadosEscrita[0] = 1'b1;
	dadosEscrita[0] = #150000 1'b0;
	dadosEscrita[0] = #160000 1'b1;
	dadosEscrita[0] = #160000 1'b0;
end 

BancoReg_vlg_sample_tst tb_sample (
	.clock(clock),
	.dadosEscrita(dadosEscrita),
	.escreveReg(escreveReg),
	.jal(jal),
	.reg1(reg1),
	.reg2(reg2),
	.regEscrita(regEscrita),
	.sampler_tx(sampler)
);

BancoReg_vlg_check_tst tb_out(
	.dado1(dado1),
	.dado2(dado2),
	.sampler_rx(sampler)
);
endmodule

