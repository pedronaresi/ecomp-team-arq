// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/18/2018 13:55:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botaoEntrada;
reg botaoSaida;
reg clock_auto;
reg [17:0] dadosExternos;
reg reset;
// wires                                               
wire LCD_BLON;
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;
wire OpMemIns;
wire [31:0] dado1;
wire [31:0] dadosEscritaReg;
wire [6:0] display0;
wire [6:0] display1;
wire [6:0] display2;
wire [6:0] display3;
wire [6:0] display4;
wire [6:0] display5;
wire [6:0] display6;
wire [6:0] display7;
wire [31:0] endereco2;
wire [31:0] enderecoPC;
wire halt;
wire [31:0] instrucao_out;
wire ledentrada;
wire ledmem;
wire ledsaida;
wire neg1;
wire neg2;
wire neg3;
wire [31:0] pcAtual;
wire [31:0] progAtual;
wire [31:0] saida_hd;
wire [31:0] saida_m5;

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.OpMemIns(OpMemIns),
	.botaoEntrada(botaoEntrada),
	.botaoSaida(botaoSaida),
	.clock_auto(clock_auto),
	.dado1(dado1),
	.dadosEscritaReg(dadosEscritaReg),
	.dadosExternos(dadosExternos),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.display6(display6),
	.display7(display7),
	.endereco2(endereco2),
	.enderecoPC(enderecoPC),
	.halt(halt),
	.instrucao_out(instrucao_out),
	.ledentrada(ledentrada),
	.ledmem(ledmem),
	.ledsaida(ledsaida),
	.neg1(neg1),
	.neg2(neg2),
	.neg3(neg3),
	.pcAtual(pcAtual),
	.progAtual(progAtual),
	.reset(reset),
	.saida_hd(saida_hd),
	.saida_m5(saida_m5)
);
initial 
begin 
#1000000 $finish;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// botaoEntrada
always
begin
	botaoEntrada = 1'b0;
	botaoEntrada = #5000 1'b1;
	#5000;
end 

// botaoSaida
always
begin
	botaoSaida = 1'b0;
	botaoSaida = #5000 1'b1;
	#5000;
end 

// clock_auto
always
begin
	clock_auto = 1'b0;
	clock_auto = #500 1'b1;
	#500;
end 
// dadosExternos[ 17 ]
initial
begin
	dadosExternos[17] = 1'b0;
end 
// dadosExternos[ 16 ]
initial
begin
	dadosExternos[16] = 1'b0;
end 
// dadosExternos[ 15 ]
initial
begin
	dadosExternos[15] = 1'b0;
end 
// dadosExternos[ 14 ]
initial
begin
	dadosExternos[14] = 1'b0;
end 
// dadosExternos[ 13 ]
initial
begin
	dadosExternos[13] = 1'b0;
end 
// dadosExternos[ 12 ]
initial
begin
	dadosExternos[12] = 1'b0;
end 
// dadosExternos[ 11 ]
initial
begin
	dadosExternos[11] = 1'b0;
end 
// dadosExternos[ 10 ]
initial
begin
	dadosExternos[10] = 1'b0;
end 
// dadosExternos[ 9 ]
initial
begin
	dadosExternos[9] = 1'b0;
end 
// dadosExternos[ 8 ]
initial
begin
	dadosExternos[8] = 1'b0;
end 
// dadosExternos[ 7 ]
initial
begin
	dadosExternos[7] = 1'b0;
end 
// dadosExternos[ 6 ]
initial
begin
	dadosExternos[6] = 1'b0;
end 
// dadosExternos[ 5 ]
initial
begin
	dadosExternos[5] = 1'b0;
end 
// dadosExternos[ 4 ]
initial
begin
	dadosExternos[4] = 1'b0;
end 
// dadosExternos[ 3 ]
initial
begin
	dadosExternos[3] = 1'b0;
end 
// dadosExternos[ 2 ]
initial
begin
	dadosExternos[2] = 1'b0;
end 
// dadosExternos[ 1 ]
initial
begin
	dadosExternos[1] = 1'b1;
end 
// dadosExternos[ 0 ]
initial
begin
	dadosExternos[0] = 1'b1;
end 
endmodule

