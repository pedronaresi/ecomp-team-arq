// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2017 19:27:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IO_vlg_sample_tst(
	OpIO,
	clock,
	dadosEscrita,
	dadosExternos,
	endereco,
	reset,
	sampler_tx
);
input  OpIO;
input  clock;
input [31:0] dadosEscrita;
input [15:0] dadosExternos;
input [31:0] endereco;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(OpIO or clock or dadosEscrita or dadosExternos or endereco or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IO_vlg_check_tst (
	dadosLidos,
	display0,
	display1,
	display2,
	display3,
	display4,
	display5,
	display6,
	display7,
	neg1,
	neg2,
	neg3,
	sampler_rx
);
input [31:0] dadosLidos;
input [3:0] display0;
input [3:0] display1;
input [3:0] display2;
input [3:0] display3;
input [3:0] display4;
input [3:0] display5;
input [3:0] display6;
input [3:0] display7;
input  neg1;
input  neg2;
input  neg3;
input sampler_rx;

reg [31:0] dadosLidos_expected;
reg [3:0] display0_expected;
reg [3:0] display1_expected;
reg [3:0] display2_expected;
reg [3:0] display3_expected;
reg [3:0] display4_expected;
reg [3:0] display5_expected;
reg [3:0] display6_expected;
reg [3:0] display7_expected;
reg  neg1_expected;
reg  neg2_expected;
reg  neg3_expected;

reg [31:0] dadosLidos_prev;
reg [3:0] display0_prev;
reg [3:0] display1_prev;
reg [3:0] display2_prev;
reg [3:0] display3_prev;
reg [3:0] display4_prev;
reg [3:0] display5_prev;
reg [3:0] display6_prev;
reg [3:0] display7_prev;
reg  neg1_prev;
reg  neg2_prev;
reg  neg3_prev;

reg [31:0] dadosLidos_expected_prev;
reg [3:0] display0_expected_prev;
reg [3:0] display1_expected_prev;
reg [3:0] display2_expected_prev;
reg [3:0] display3_expected_prev;
reg [3:0] display4_expected_prev;
reg [3:0] display5_expected_prev;
reg [3:0] display6_expected_prev;
reg [3:0] display7_expected_prev;
reg  neg1_expected_prev;
reg  neg2_expected_prev;
reg  neg3_expected_prev;

reg [31:0] last_dadosLidos_exp;
reg [3:0] last_display0_exp;
reg [3:0] last_display1_exp;
reg [3:0] last_display2_exp;
reg [3:0] last_display3_exp;
reg [3:0] last_display4_exp;
reg [3:0] last_display5_exp;
reg [3:0] last_display6_exp;
reg [3:0] last_display7_exp;
reg  last_neg1_exp;
reg  last_neg2_exp;
reg  last_neg3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	dadosLidos_prev = dadosLidos;
	display0_prev = display0;
	display1_prev = display1;
	display2_prev = display2;
	display3_prev = display3;
	display4_prev = display4;
	display5_prev = display5;
	display6_prev = display6;
	display7_prev = display7;
	neg1_prev = neg1;
	neg2_prev = neg2;
	neg3_prev = neg3;
end

// update expected /o prevs

always @(trigger)
begin
	dadosLidos_expected_prev = dadosLidos_expected;
	display0_expected_prev = display0_expected;
	display1_expected_prev = display1_expected;
	display2_expected_prev = display2_expected;
	display3_expected_prev = display3_expected;
	display4_expected_prev = display4_expected;
	display5_expected_prev = display5_expected;
	display6_expected_prev = display6_expected;
	display7_expected_prev = display7_expected;
	neg1_expected_prev = neg1_expected;
	neg2_expected_prev = neg2_expected;
	neg3_expected_prev = neg3_expected;
end



// expected neg1
initial
begin
	neg1_expected = 1'bX;
end 
// expected display1[ 3 ]
initial
begin
	display1_expected[3] = 1'bX;
end 
// expected display1[ 2 ]
initial
begin
	display1_expected[2] = 1'bX;
end 
// expected display1[ 1 ]
initial
begin
	display1_expected[1] = 1'bX;
end 
// expected display1[ 0 ]
initial
begin
	display1_expected[0] = 1'bX;
end 
// expected display0[ 3 ]
initial
begin
	display0_expected[3] = 1'bX;
end 
// expected display0[ 2 ]
initial
begin
	display0_expected[2] = 1'bX;
end 
// expected display0[ 1 ]
initial
begin
	display0_expected[1] = 1'bX;
end 
// expected display0[ 0 ]
initial
begin
	display0_expected[0] = 1'bX;
end 

// expected neg2
initial
begin
	neg2_expected = 1'bX;
end 
// expected display3[ 3 ]
initial
begin
	display3_expected[3] = 1'bX;
end 
// expected display3[ 2 ]
initial
begin
	display3_expected[2] = 1'bX;
end 
// expected display3[ 1 ]
initial
begin
	display3_expected[1] = 1'bX;
end 
// expected display3[ 0 ]
initial
begin
	display3_expected[0] = 1'bX;
end 
// expected display2[ 3 ]
initial
begin
	display2_expected[3] = 1'bX;
end 
// expected display2[ 2 ]
initial
begin
	display2_expected[2] = 1'bX;
end 
// expected display2[ 1 ]
initial
begin
	display2_expected[1] = 1'bX;
end 
// expected display2[ 0 ]
initial
begin
	display2_expected[0] = 1'bX;
end 

// expected neg3
initial
begin
	neg3_expected = 1'bX;
end 
// expected display7[ 3 ]
initial
begin
	display7_expected[3] = 1'bX;
end 
// expected display7[ 2 ]
initial
begin
	display7_expected[2] = 1'bX;
end 
// expected display7[ 1 ]
initial
begin
	display7_expected[1] = 1'bX;
end 
// expected display7[ 0 ]
initial
begin
	display7_expected[0] = 1'bX;
end 
// expected display6[ 3 ]
initial
begin
	display6_expected[3] = 1'bX;
end 
// expected display6[ 2 ]
initial
begin
	display6_expected[2] = 1'bX;
end 
// expected display6[ 1 ]
initial
begin
	display6_expected[1] = 1'bX;
end 
// expected display6[ 0 ]
initial
begin
	display6_expected[0] = 1'bX;
end 
// expected display5[ 3 ]
initial
begin
	display5_expected[3] = 1'bX;
end 
// expected display5[ 2 ]
initial
begin
	display5_expected[2] = 1'bX;
end 
// expected display5[ 1 ]
initial
begin
	display5_expected[1] = 1'bX;
end 
// expected display5[ 0 ]
initial
begin
	display5_expected[0] = 1'bX;
end 
// expected display4[ 3 ]
initial
begin
	display4_expected[3] = 1'bX;
end 
// expected display4[ 2 ]
initial
begin
	display4_expected[2] = 1'bX;
end 
// expected display4[ 1 ]
initial
begin
	display4_expected[1] = 1'bX;
end 
// expected display4[ 0 ]
initial
begin
	display4_expected[0] = 1'bX;
end 
// expected dadosLidos[ 31 ]
initial
begin
	dadosLidos_expected[31] = 1'bX;
end 
// expected dadosLidos[ 30 ]
initial
begin
	dadosLidos_expected[30] = 1'bX;
end 
// expected dadosLidos[ 29 ]
initial
begin
	dadosLidos_expected[29] = 1'bX;
end 
// expected dadosLidos[ 28 ]
initial
begin
	dadosLidos_expected[28] = 1'bX;
end 
// expected dadosLidos[ 27 ]
initial
begin
	dadosLidos_expected[27] = 1'bX;
end 
// expected dadosLidos[ 26 ]
initial
begin
	dadosLidos_expected[26] = 1'bX;
end 
// expected dadosLidos[ 25 ]
initial
begin
	dadosLidos_expected[25] = 1'bX;
end 
// expected dadosLidos[ 24 ]
initial
begin
	dadosLidos_expected[24] = 1'bX;
end 
// expected dadosLidos[ 23 ]
initial
begin
	dadosLidos_expected[23] = 1'bX;
end 
// expected dadosLidos[ 22 ]
initial
begin
	dadosLidos_expected[22] = 1'bX;
end 
// expected dadosLidos[ 21 ]
initial
begin
	dadosLidos_expected[21] = 1'bX;
end 
// expected dadosLidos[ 20 ]
initial
begin
	dadosLidos_expected[20] = 1'bX;
end 
// expected dadosLidos[ 19 ]
initial
begin
	dadosLidos_expected[19] = 1'bX;
end 
// expected dadosLidos[ 18 ]
initial
begin
	dadosLidos_expected[18] = 1'bX;
end 
// expected dadosLidos[ 17 ]
initial
begin
	dadosLidos_expected[17] = 1'bX;
end 
// expected dadosLidos[ 16 ]
initial
begin
	dadosLidos_expected[16] = 1'bX;
end 
// expected dadosLidos[ 15 ]
initial
begin
	dadosLidos_expected[15] = 1'bX;
end 
// expected dadosLidos[ 14 ]
initial
begin
	dadosLidos_expected[14] = 1'bX;
end 
// expected dadosLidos[ 13 ]
initial
begin
	dadosLidos_expected[13] = 1'bX;
end 
// expected dadosLidos[ 12 ]
initial
begin
	dadosLidos_expected[12] = 1'bX;
end 
// expected dadosLidos[ 11 ]
initial
begin
	dadosLidos_expected[11] = 1'bX;
end 
// expected dadosLidos[ 10 ]
initial
begin
	dadosLidos_expected[10] = 1'bX;
end 
// expected dadosLidos[ 9 ]
initial
begin
	dadosLidos_expected[9] = 1'bX;
end 
// expected dadosLidos[ 8 ]
initial
begin
	dadosLidos_expected[8] = 1'bX;
end 
// expected dadosLidos[ 7 ]
initial
begin
	dadosLidos_expected[7] = 1'bX;
end 
// expected dadosLidos[ 6 ]
initial
begin
	dadosLidos_expected[6] = 1'bX;
end 
// expected dadosLidos[ 5 ]
initial
begin
	dadosLidos_expected[5] = 1'bX;
end 
// expected dadosLidos[ 4 ]
initial
begin
	dadosLidos_expected[4] = 1'bX;
end 
// expected dadosLidos[ 3 ]
initial
begin
	dadosLidos_expected[3] = 1'bX;
end 
// expected dadosLidos[ 2 ]
initial
begin
	dadosLidos_expected[2] = 1'bX;
end 
// expected dadosLidos[ 1 ]
initial
begin
	dadosLidos_expected[1] = 1'bX;
end 
// expected dadosLidos[ 0 ]
initial
begin
	dadosLidos_expected[0] = 1'bX;
end 
// generate trigger
always @(dadosLidos_expected or dadosLidos or display0_expected or display0 or display1_expected or display1 or display2_expected or display2 or display3_expected or display3 or display4_expected or display4 or display5_expected or display5 or display6_expected or display6 or display7_expected or display7 or neg1_expected or neg1 or neg2_expected or neg2 or neg3_expected or neg3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dadosLidos = %b | expected display0 = %b | expected display1 = %b | expected display2 = %b | expected display3 = %b | expected display4 = %b | expected display5 = %b | expected display6 = %b | expected display7 = %b | expected neg1 = %b | expected neg2 = %b | expected neg3 = %b | ",dadosLidos_expected_prev,display0_expected_prev,display1_expected_prev,display2_expected_prev,display3_expected_prev,display4_expected_prev,display5_expected_prev,display6_expected_prev,display7_expected_prev,neg1_expected_prev,neg2_expected_prev,neg3_expected_prev);
	$display("| real dadosLidos = %b | real display0 = %b | real display1 = %b | real display2 = %b | real display3 = %b | real display4 = %b | real display5 = %b | real display6 = %b | real display7 = %b | real neg1 = %b | real neg2 = %b | real neg3 = %b | ",dadosLidos_prev,display0_prev,display1_prev,display2_prev,display3_prev,display4_prev,display5_prev,display6_prev,display7_prev,neg1_prev,neg2_prev,neg3_prev);
`endif
	if (
		( dadosLidos_expected_prev[0] !== 1'bx ) && ( dadosLidos_prev[0] !== dadosLidos_expected_prev[0] )
		&& ((dadosLidos_expected_prev[0] !== last_dadosLidos_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[0] = dadosLidos_expected_prev[0];
	end
	if (
		( dadosLidos_expected_prev[1] !== 1'bx ) && ( dadosLidos_prev[1] !== dadosLidos_expected_prev[1] )
		&& ((dadosLidos_expected_prev[1] !== last_dadosLidos_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[1] = dadosLidos_expected_prev[1];
	end
	if (
		( dadosLidos_expected_prev[2] !== 1'bx ) && ( dadosLidos_prev[2] !== dadosLidos_expected_prev[2] )
		&& ((dadosLidos_expected_prev[2] !== last_dadosLidos_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[2] = dadosLidos_expected_prev[2];
	end
	if (
		( dadosLidos_expected_prev[3] !== 1'bx ) && ( dadosLidos_prev[3] !== dadosLidos_expected_prev[3] )
		&& ((dadosLidos_expected_prev[3] !== last_dadosLidos_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[3] = dadosLidos_expected_prev[3];
	end
	if (
		( dadosLidos_expected_prev[4] !== 1'bx ) && ( dadosLidos_prev[4] !== dadosLidos_expected_prev[4] )
		&& ((dadosLidos_expected_prev[4] !== last_dadosLidos_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[4] = dadosLidos_expected_prev[4];
	end
	if (
		( dadosLidos_expected_prev[5] !== 1'bx ) && ( dadosLidos_prev[5] !== dadosLidos_expected_prev[5] )
		&& ((dadosLidos_expected_prev[5] !== last_dadosLidos_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[5] = dadosLidos_expected_prev[5];
	end
	if (
		( dadosLidos_expected_prev[6] !== 1'bx ) && ( dadosLidos_prev[6] !== dadosLidos_expected_prev[6] )
		&& ((dadosLidos_expected_prev[6] !== last_dadosLidos_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[6] = dadosLidos_expected_prev[6];
	end
	if (
		( dadosLidos_expected_prev[7] !== 1'bx ) && ( dadosLidos_prev[7] !== dadosLidos_expected_prev[7] )
		&& ((dadosLidos_expected_prev[7] !== last_dadosLidos_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[7] = dadosLidos_expected_prev[7];
	end
	if (
		( dadosLidos_expected_prev[8] !== 1'bx ) && ( dadosLidos_prev[8] !== dadosLidos_expected_prev[8] )
		&& ((dadosLidos_expected_prev[8] !== last_dadosLidos_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[8] = dadosLidos_expected_prev[8];
	end
	if (
		( dadosLidos_expected_prev[9] !== 1'bx ) && ( dadosLidos_prev[9] !== dadosLidos_expected_prev[9] )
		&& ((dadosLidos_expected_prev[9] !== last_dadosLidos_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[9] = dadosLidos_expected_prev[9];
	end
	if (
		( dadosLidos_expected_prev[10] !== 1'bx ) && ( dadosLidos_prev[10] !== dadosLidos_expected_prev[10] )
		&& ((dadosLidos_expected_prev[10] !== last_dadosLidos_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[10] = dadosLidos_expected_prev[10];
	end
	if (
		( dadosLidos_expected_prev[11] !== 1'bx ) && ( dadosLidos_prev[11] !== dadosLidos_expected_prev[11] )
		&& ((dadosLidos_expected_prev[11] !== last_dadosLidos_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[11] = dadosLidos_expected_prev[11];
	end
	if (
		( dadosLidos_expected_prev[12] !== 1'bx ) && ( dadosLidos_prev[12] !== dadosLidos_expected_prev[12] )
		&& ((dadosLidos_expected_prev[12] !== last_dadosLidos_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[12] = dadosLidos_expected_prev[12];
	end
	if (
		( dadosLidos_expected_prev[13] !== 1'bx ) && ( dadosLidos_prev[13] !== dadosLidos_expected_prev[13] )
		&& ((dadosLidos_expected_prev[13] !== last_dadosLidos_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[13] = dadosLidos_expected_prev[13];
	end
	if (
		( dadosLidos_expected_prev[14] !== 1'bx ) && ( dadosLidos_prev[14] !== dadosLidos_expected_prev[14] )
		&& ((dadosLidos_expected_prev[14] !== last_dadosLidos_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[14] = dadosLidos_expected_prev[14];
	end
	if (
		( dadosLidos_expected_prev[15] !== 1'bx ) && ( dadosLidos_prev[15] !== dadosLidos_expected_prev[15] )
		&& ((dadosLidos_expected_prev[15] !== last_dadosLidos_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[15] = dadosLidos_expected_prev[15];
	end
	if (
		( dadosLidos_expected_prev[16] !== 1'bx ) && ( dadosLidos_prev[16] !== dadosLidos_expected_prev[16] )
		&& ((dadosLidos_expected_prev[16] !== last_dadosLidos_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[16] = dadosLidos_expected_prev[16];
	end
	if (
		( dadosLidos_expected_prev[17] !== 1'bx ) && ( dadosLidos_prev[17] !== dadosLidos_expected_prev[17] )
		&& ((dadosLidos_expected_prev[17] !== last_dadosLidos_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[17] = dadosLidos_expected_prev[17];
	end
	if (
		( dadosLidos_expected_prev[18] !== 1'bx ) && ( dadosLidos_prev[18] !== dadosLidos_expected_prev[18] )
		&& ((dadosLidos_expected_prev[18] !== last_dadosLidos_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[18] = dadosLidos_expected_prev[18];
	end
	if (
		( dadosLidos_expected_prev[19] !== 1'bx ) && ( dadosLidos_prev[19] !== dadosLidos_expected_prev[19] )
		&& ((dadosLidos_expected_prev[19] !== last_dadosLidos_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[19] = dadosLidos_expected_prev[19];
	end
	if (
		( dadosLidos_expected_prev[20] !== 1'bx ) && ( dadosLidos_prev[20] !== dadosLidos_expected_prev[20] )
		&& ((dadosLidos_expected_prev[20] !== last_dadosLidos_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[20] = dadosLidos_expected_prev[20];
	end
	if (
		( dadosLidos_expected_prev[21] !== 1'bx ) && ( dadosLidos_prev[21] !== dadosLidos_expected_prev[21] )
		&& ((dadosLidos_expected_prev[21] !== last_dadosLidos_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[21] = dadosLidos_expected_prev[21];
	end
	if (
		( dadosLidos_expected_prev[22] !== 1'bx ) && ( dadosLidos_prev[22] !== dadosLidos_expected_prev[22] )
		&& ((dadosLidos_expected_prev[22] !== last_dadosLidos_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[22] = dadosLidos_expected_prev[22];
	end
	if (
		( dadosLidos_expected_prev[23] !== 1'bx ) && ( dadosLidos_prev[23] !== dadosLidos_expected_prev[23] )
		&& ((dadosLidos_expected_prev[23] !== last_dadosLidos_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[23] = dadosLidos_expected_prev[23];
	end
	if (
		( dadosLidos_expected_prev[24] !== 1'bx ) && ( dadosLidos_prev[24] !== dadosLidos_expected_prev[24] )
		&& ((dadosLidos_expected_prev[24] !== last_dadosLidos_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[24] = dadosLidos_expected_prev[24];
	end
	if (
		( dadosLidos_expected_prev[25] !== 1'bx ) && ( dadosLidos_prev[25] !== dadosLidos_expected_prev[25] )
		&& ((dadosLidos_expected_prev[25] !== last_dadosLidos_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[25] = dadosLidos_expected_prev[25];
	end
	if (
		( dadosLidos_expected_prev[26] !== 1'bx ) && ( dadosLidos_prev[26] !== dadosLidos_expected_prev[26] )
		&& ((dadosLidos_expected_prev[26] !== last_dadosLidos_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[26] = dadosLidos_expected_prev[26];
	end
	if (
		( dadosLidos_expected_prev[27] !== 1'bx ) && ( dadosLidos_prev[27] !== dadosLidos_expected_prev[27] )
		&& ((dadosLidos_expected_prev[27] !== last_dadosLidos_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[27] = dadosLidos_expected_prev[27];
	end
	if (
		( dadosLidos_expected_prev[28] !== 1'bx ) && ( dadosLidos_prev[28] !== dadosLidos_expected_prev[28] )
		&& ((dadosLidos_expected_prev[28] !== last_dadosLidos_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[28] = dadosLidos_expected_prev[28];
	end
	if (
		( dadosLidos_expected_prev[29] !== 1'bx ) && ( dadosLidos_prev[29] !== dadosLidos_expected_prev[29] )
		&& ((dadosLidos_expected_prev[29] !== last_dadosLidos_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[29] = dadosLidos_expected_prev[29];
	end
	if (
		( dadosLidos_expected_prev[30] !== 1'bx ) && ( dadosLidos_prev[30] !== dadosLidos_expected_prev[30] )
		&& ((dadosLidos_expected_prev[30] !== last_dadosLidos_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[30] = dadosLidos_expected_prev[30];
	end
	if (
		( dadosLidos_expected_prev[31] !== 1'bx ) && ( dadosLidos_prev[31] !== dadosLidos_expected_prev[31] )
		&& ((dadosLidos_expected_prev[31] !== last_dadosLidos_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadosLidos[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadosLidos_expected_prev);
		$display ("     Real value = %b", dadosLidos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadosLidos_exp[31] = dadosLidos_expected_prev[31];
	end
	if (
		( display0_expected_prev[0] !== 1'bx ) && ( display0_prev[0] !== display0_expected_prev[0] )
		&& ((display0_expected_prev[0] !== last_display0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[0] = display0_expected_prev[0];
	end
	if (
		( display0_expected_prev[1] !== 1'bx ) && ( display0_prev[1] !== display0_expected_prev[1] )
		&& ((display0_expected_prev[1] !== last_display0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[1] = display0_expected_prev[1];
	end
	if (
		( display0_expected_prev[2] !== 1'bx ) && ( display0_prev[2] !== display0_expected_prev[2] )
		&& ((display0_expected_prev[2] !== last_display0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[2] = display0_expected_prev[2];
	end
	if (
		( display0_expected_prev[3] !== 1'bx ) && ( display0_prev[3] !== display0_expected_prev[3] )
		&& ((display0_expected_prev[3] !== last_display0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display0_exp[3] = display0_expected_prev[3];
	end
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display2_expected_prev[0] !== 1'bx ) && ( display2_prev[0] !== display2_expected_prev[0] )
		&& ((display2_expected_prev[0] !== last_display2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[0] = display2_expected_prev[0];
	end
	if (
		( display2_expected_prev[1] !== 1'bx ) && ( display2_prev[1] !== display2_expected_prev[1] )
		&& ((display2_expected_prev[1] !== last_display2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[1] = display2_expected_prev[1];
	end
	if (
		( display2_expected_prev[2] !== 1'bx ) && ( display2_prev[2] !== display2_expected_prev[2] )
		&& ((display2_expected_prev[2] !== last_display2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[2] = display2_expected_prev[2];
	end
	if (
		( display2_expected_prev[3] !== 1'bx ) && ( display2_prev[3] !== display2_expected_prev[3] )
		&& ((display2_expected_prev[3] !== last_display2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display2_exp[3] = display2_expected_prev[3];
	end
	if (
		( display3_expected_prev[0] !== 1'bx ) && ( display3_prev[0] !== display3_expected_prev[0] )
		&& ((display3_expected_prev[0] !== last_display3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[0] = display3_expected_prev[0];
	end
	if (
		( display3_expected_prev[1] !== 1'bx ) && ( display3_prev[1] !== display3_expected_prev[1] )
		&& ((display3_expected_prev[1] !== last_display3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[1] = display3_expected_prev[1];
	end
	if (
		( display3_expected_prev[2] !== 1'bx ) && ( display3_prev[2] !== display3_expected_prev[2] )
		&& ((display3_expected_prev[2] !== last_display3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[2] = display3_expected_prev[2];
	end
	if (
		( display3_expected_prev[3] !== 1'bx ) && ( display3_prev[3] !== display3_expected_prev[3] )
		&& ((display3_expected_prev[3] !== last_display3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display3_exp[3] = display3_expected_prev[3];
	end
	if (
		( display4_expected_prev[0] !== 1'bx ) && ( display4_prev[0] !== display4_expected_prev[0] )
		&& ((display4_expected_prev[0] !== last_display4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[0] = display4_expected_prev[0];
	end
	if (
		( display4_expected_prev[1] !== 1'bx ) && ( display4_prev[1] !== display4_expected_prev[1] )
		&& ((display4_expected_prev[1] !== last_display4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[1] = display4_expected_prev[1];
	end
	if (
		( display4_expected_prev[2] !== 1'bx ) && ( display4_prev[2] !== display4_expected_prev[2] )
		&& ((display4_expected_prev[2] !== last_display4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[2] = display4_expected_prev[2];
	end
	if (
		( display4_expected_prev[3] !== 1'bx ) && ( display4_prev[3] !== display4_expected_prev[3] )
		&& ((display4_expected_prev[3] !== last_display4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display4_expected_prev);
		$display ("     Real value = %b", display4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display4_exp[3] = display4_expected_prev[3];
	end
	if (
		( display5_expected_prev[0] !== 1'bx ) && ( display5_prev[0] !== display5_expected_prev[0] )
		&& ((display5_expected_prev[0] !== last_display5_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[0] = display5_expected_prev[0];
	end
	if (
		( display5_expected_prev[1] !== 1'bx ) && ( display5_prev[1] !== display5_expected_prev[1] )
		&& ((display5_expected_prev[1] !== last_display5_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[1] = display5_expected_prev[1];
	end
	if (
		( display5_expected_prev[2] !== 1'bx ) && ( display5_prev[2] !== display5_expected_prev[2] )
		&& ((display5_expected_prev[2] !== last_display5_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[2] = display5_expected_prev[2];
	end
	if (
		( display5_expected_prev[3] !== 1'bx ) && ( display5_prev[3] !== display5_expected_prev[3] )
		&& ((display5_expected_prev[3] !== last_display5_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display5_expected_prev);
		$display ("     Real value = %b", display5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_display5_exp[3] = display5_expected_prev[3];
	end
	if (
		( display6_expected_prev[0] !== 1'bx ) && ( display6_prev[0] !== display6_expected_prev[0] )
		&& ((display6_expected_prev[0] !== last_display6_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[0] = display6_expected_prev[0];
	end
	if (
		( display6_expected_prev[1] !== 1'bx ) && ( display6_prev[1] !== display6_expected_prev[1] )
		&& ((display6_expected_prev[1] !== last_display6_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[1] = display6_expected_prev[1];
	end
	if (
		( display6_expected_prev[2] !== 1'bx ) && ( display6_prev[2] !== display6_expected_prev[2] )
		&& ((display6_expected_prev[2] !== last_display6_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[2] = display6_expected_prev[2];
	end
	if (
		( display6_expected_prev[3] !== 1'bx ) && ( display6_prev[3] !== display6_expected_prev[3] )
		&& ((display6_expected_prev[3] !== last_display6_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display6_expected_prev);
		$display ("     Real value = %b", display6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_display6_exp[3] = display6_expected_prev[3];
	end
	if (
		( display7_expected_prev[0] !== 1'bx ) && ( display7_prev[0] !== display7_expected_prev[0] )
		&& ((display7_expected_prev[0] !== last_display7_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[0] = display7_expected_prev[0];
	end
	if (
		( display7_expected_prev[1] !== 1'bx ) && ( display7_prev[1] !== display7_expected_prev[1] )
		&& ((display7_expected_prev[1] !== last_display7_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[1] = display7_expected_prev[1];
	end
	if (
		( display7_expected_prev[2] !== 1'bx ) && ( display7_prev[2] !== display7_expected_prev[2] )
		&& ((display7_expected_prev[2] !== last_display7_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[2] = display7_expected_prev[2];
	end
	if (
		( display7_expected_prev[3] !== 1'bx ) && ( display7_prev[3] !== display7_expected_prev[3] )
		&& ((display7_expected_prev[3] !== last_display7_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_display7_exp[3] = display7_expected_prev[3];
	end
	if (
		( neg1_expected_prev !== 1'bx ) && ( neg1_prev !== neg1_expected_prev )
		&& ((neg1_expected_prev !== last_neg1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg1_expected_prev);
		$display ("     Real value = %b", neg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_neg1_exp = neg1_expected_prev;
	end
	if (
		( neg2_expected_prev !== 1'bx ) && ( neg2_prev !== neg2_expected_prev )
		&& ((neg2_expected_prev !== last_neg2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg2_expected_prev);
		$display ("     Real value = %b", neg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_neg2_exp = neg2_expected_prev;
	end
	if (
		( neg3_expected_prev !== 1'bx ) && ( neg3_prev !== neg3_expected_prev )
		&& ((neg3_expected_prev !== last_neg3_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port neg3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", neg3_expected_prev);
		$display ("     Real value = %b", neg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_neg3_exp = neg3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg OpIO;
reg clock;
reg [31:0] dadosEscrita;
reg [15:0] dadosExternos;
reg [31:0] endereco;
reg reset;
// wires                                               
wire [31:0] dadosLidos;
wire [3:0] display0;
wire [3:0] display1;
wire [3:0] display2;
wire [3:0] display3;
wire [3:0] display4;
wire [3:0] display5;
wire [3:0] display6;
wire [3:0] display7;
wire neg1;
wire neg2;
wire neg3;

wire sampler;                             

// assign statements (if any)                          
IO i1 (
// port map - connection between master ports and signals/registers   
	.OpIO(OpIO),
	.clock(clock),
	.dadosEscrita(dadosEscrita),
	.dadosExternos(dadosExternos),
	.dadosLidos(dadosLidos),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.display6(display6),
	.display7(display7),
	.endereco(endereco),
	.neg1(neg1),
	.neg2(neg2),
	.neg3(neg3),
	.reset(reset)
);

// clock
initial
begin
	clock = 1'b1;
	# 80000;
	repeat(5)
	begin
		clock = 1'b0;
		clock = #80000 1'b1;
		# 80000;
	end
	clock = 1'b0;
	clock = #80000 1'b1;
end 

// OpIO
initial
begin
	OpIO = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// endereco[ 31 ]
initial
begin
	endereco[31] = 1'b0;
end 
// endereco[ 30 ]
initial
begin
	endereco[30] = 1'b0;
end 
// endereco[ 29 ]
initial
begin
	endereco[29] = 1'b0;
end 
// endereco[ 28 ]
initial
begin
	endereco[28] = 1'b0;
end 
// endereco[ 27 ]
initial
begin
	endereco[27] = 1'b0;
end 
// endereco[ 26 ]
initial
begin
	endereco[26] = 1'b0;
end 
// endereco[ 25 ]
initial
begin
	endereco[25] = 1'b0;
end 
// endereco[ 24 ]
initial
begin
	endereco[24] = 1'b0;
end 
// endereco[ 23 ]
initial
begin
	endereco[23] = 1'b0;
end 
// endereco[ 22 ]
initial
begin
	endereco[22] = 1'b0;
end 
// endereco[ 21 ]
initial
begin
	endereco[21] = 1'b0;
end 
// endereco[ 20 ]
initial
begin
	endereco[20] = 1'b0;
end 
// endereco[ 19 ]
initial
begin
	endereco[19] = 1'b0;
end 
// endereco[ 18 ]
initial
begin
	endereco[18] = 1'b0;
end 
// endereco[ 17 ]
initial
begin
	endereco[17] = 1'b0;
end 
// endereco[ 16 ]
initial
begin
	endereco[16] = 1'b0;
end 
// endereco[ 15 ]
initial
begin
	endereco[15] = 1'b0;
end 
// endereco[ 14 ]
initial
begin
	endereco[14] = 1'b0;
end 
// endereco[ 13 ]
initial
begin
	endereco[13] = 1'b0;
end 
// endereco[ 12 ]
initial
begin
	endereco[12] = 1'b0;
end 
// endereco[ 11 ]
initial
begin
	endereco[11] = 1'b0;
end 
// endereco[ 10 ]
initial
begin
	endereco[10] = 1'b0;
end 
// endereco[ 9 ]
initial
begin
	endereco[9] = 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
end 
// endereco[ 3 ]
initial
begin
	endereco[3] = 1'b0;
end 
// endereco[ 2 ]
initial
begin
	endereco[2] = 1'b0;
end 
// endereco[ 1 ]
initial
begin
	endereco[1] = 1'b0;
	endereco[1] = #320000 1'b1;
	endereco[1] = #160000 1'b0;
end 
// endereco[ 0 ]
initial
begin
	endereco[0] = 1'b0;
	endereco[0] = #160000 1'b1;
	endereco[0] = #160000 1'b0;
end 
// dadosEscrita[ 31 ]
initial
begin
	dadosEscrita[31] = 1'b0;
	dadosEscrita[31] = #160000 1'b1;
	dadosEscrita[31] = #320000 1'b0;
end 
// dadosEscrita[ 30 ]
initial
begin
	dadosEscrita[30] = 1'b0;
	dadosEscrita[30] = #160000 1'b1;
	dadosEscrita[30] = #320000 1'b0;
end 
// dadosEscrita[ 29 ]
initial
begin
	dadosEscrita[29] = 1'b0;
	dadosEscrita[29] = #160000 1'b1;
	dadosEscrita[29] = #320000 1'b0;
end 
// dadosEscrita[ 28 ]
initial
begin
	dadosEscrita[28] = 1'b0;
	dadosEscrita[28] = #160000 1'b1;
	dadosEscrita[28] = #320000 1'b0;
end 
// dadosEscrita[ 27 ]
initial
begin
	dadosEscrita[27] = 1'b0;
	dadosEscrita[27] = #160000 1'b1;
	dadosEscrita[27] = #320000 1'b0;
end 
// dadosEscrita[ 26 ]
initial
begin
	dadosEscrita[26] = 1'b0;
	dadosEscrita[26] = #160000 1'b1;
	dadosEscrita[26] = #320000 1'b0;
end 
// dadosEscrita[ 25 ]
initial
begin
	dadosEscrita[25] = 1'b0;
	dadosEscrita[25] = #160000 1'b1;
	dadosEscrita[25] = #320000 1'b0;
end 
// dadosEscrita[ 24 ]
initial
begin
	dadosEscrita[24] = 1'b0;
	dadosEscrita[24] = #160000 1'b1;
	dadosEscrita[24] = #320000 1'b0;
end 
// dadosEscrita[ 23 ]
initial
begin
	dadosEscrita[23] = 1'b0;
	dadosEscrita[23] = #160000 1'b1;
	dadosEscrita[23] = #320000 1'b0;
end 
// dadosEscrita[ 22 ]
initial
begin
	dadosEscrita[22] = 1'b0;
	dadosEscrita[22] = #160000 1'b1;
	dadosEscrita[22] = #320000 1'b0;
end 
// dadosEscrita[ 21 ]
initial
begin
	dadosEscrita[21] = 1'b0;
	dadosEscrita[21] = #160000 1'b1;
	dadosEscrita[21] = #320000 1'b0;
end 
// dadosEscrita[ 20 ]
initial
begin
	dadosEscrita[20] = 1'b0;
	dadosEscrita[20] = #160000 1'b1;
	dadosEscrita[20] = #320000 1'b0;
end 
// dadosEscrita[ 19 ]
initial
begin
	dadosEscrita[19] = 1'b0;
	dadosEscrita[19] = #160000 1'b1;
	dadosEscrita[19] = #320000 1'b0;
end 
// dadosEscrita[ 18 ]
initial
begin
	dadosEscrita[18] = 1'b0;
	dadosEscrita[18] = #160000 1'b1;
	dadosEscrita[18] = #320000 1'b0;
end 
// dadosEscrita[ 17 ]
initial
begin
	dadosEscrita[17] = 1'b0;
	dadosEscrita[17] = #160000 1'b1;
	dadosEscrita[17] = #320000 1'b0;
end 
// dadosEscrita[ 16 ]
initial
begin
	dadosEscrita[16] = 1'b0;
	dadosEscrita[16] = #160000 1'b1;
	dadosEscrita[16] = #320000 1'b0;
end 
// dadosEscrita[ 15 ]
initial
begin
	dadosEscrita[15] = 1'b0;
	dadosEscrita[15] = #160000 1'b1;
	dadosEscrita[15] = #320000 1'b0;
end 
// dadosEscrita[ 14 ]
initial
begin
	dadosEscrita[14] = 1'b0;
	dadosEscrita[14] = #160000 1'b1;
	dadosEscrita[14] = #320000 1'b0;
end 
// dadosEscrita[ 13 ]
initial
begin
	dadosEscrita[13] = 1'b0;
	dadosEscrita[13] = #160000 1'b1;
	dadosEscrita[13] = #320000 1'b0;
end 
// dadosEscrita[ 12 ]
initial
begin
	dadosEscrita[12] = 1'b0;
	dadosEscrita[12] = #160000 1'b1;
	dadosEscrita[12] = #320000 1'b0;
end 
// dadosEscrita[ 11 ]
initial
begin
	dadosEscrita[11] = 1'b0;
	dadosEscrita[11] = #160000 1'b1;
	dadosEscrita[11] = #320000 1'b0;
end 
// dadosEscrita[ 10 ]
initial
begin
	dadosEscrita[10] = 1'b0;
	dadosEscrita[10] = #160000 1'b1;
	dadosEscrita[10] = #320000 1'b0;
end 
// dadosEscrita[ 9 ]
initial
begin
	dadosEscrita[9] = 1'b0;
	dadosEscrita[9] = #160000 1'b1;
	dadosEscrita[9] = #320000 1'b0;
end 
// dadosEscrita[ 8 ]
initial
begin
	dadosEscrita[8] = 1'b0;
	dadosEscrita[8] = #160000 1'b1;
	dadosEscrita[8] = #320000 1'b0;
end 
// dadosEscrita[ 7 ]
initial
begin
	dadosEscrita[7] = 1'b0;
	dadosEscrita[7] = #160000 1'b1;
	dadosEscrita[7] = #160000 1'b0;
end 
// dadosEscrita[ 6 ]
initial
begin
	dadosEscrita[6] = 1'b0;
	dadosEscrita[6] = #160000 1'b1;
	dadosEscrita[6] = #320000 1'b0;
end 
// dadosEscrita[ 5 ]
initial
begin
	dadosEscrita[5] = 1'b0;
	dadosEscrita[5] = #160000 1'b1;
	dadosEscrita[5] = #320000 1'b0;
end 
// dadosEscrita[ 4 ]
initial
begin
	dadosEscrita[4] = 1'b0;
	dadosEscrita[4] = #160000 1'b1;
	dadosEscrita[4] = #160000 1'b0;
end 
// dadosEscrita[ 3 ]
initial
begin
	dadosEscrita[3] = 1'b1;
	dadosEscrita[3] = #160000 1'b0;
	dadosEscrita[3] = #160000 1'b1;
	dadosEscrita[3] = #160000 1'b0;
end 
// dadosEscrita[ 2 ]
initial
begin
	dadosEscrita[2] = 1'b1;
	dadosEscrita[2] = #480000 1'b0;
end 
// dadosEscrita[ 1 ]
initial
begin
	dadosEscrita[1] = 1'b1;
	dadosEscrita[1] = #160000 1'b0;
	dadosEscrita[1] = #160000 1'b1;
	dadosEscrita[1] = #160000 1'b0;
end 
// dadosEscrita[ 0 ]
initial
begin
	dadosEscrita[0] = 1'b0;
	dadosEscrita[0] = #160000 1'b1;
	dadosEscrita[0] = #320000 1'b0;
end 
// dadosExternos[ 15 ]
initial
begin
	dadosExternos[15] = 1'b0;
end 
// dadosExternos[ 14 ]
initial
begin
	dadosExternos[14] = 1'b0;
end 
// dadosExternos[ 13 ]
initial
begin
	dadosExternos[13] = 1'b0;
end 
// dadosExternos[ 12 ]
initial
begin
	dadosExternos[12] = 1'b0;
end 
// dadosExternos[ 11 ]
initial
begin
	dadosExternos[11] = 1'b0;
end 
// dadosExternos[ 10 ]
initial
begin
	dadosExternos[10] = 1'b0;
end 
// dadosExternos[ 9 ]
initial
begin
	dadosExternos[9] = 1'b0;
end 
// dadosExternos[ 8 ]
initial
begin
	dadosExternos[8] = 1'b0;
end 
// dadosExternos[ 7 ]
initial
begin
	dadosExternos[7] = 1'b0;
end 
// dadosExternos[ 6 ]
initial
begin
	dadosExternos[6] = 1'b0;
end 
// dadosExternos[ 5 ]
initial
begin
	dadosExternos[5] = 1'b0;
end 
// dadosExternos[ 4 ]
initial
begin
	dadosExternos[4] = 1'b0;
end 
// dadosExternos[ 3 ]
initial
begin
	dadosExternos[3] = 1'b1;
end 
// dadosExternos[ 2 ]
initial
begin
	dadosExternos[2] = 1'b1;
	dadosExternos[2] = #640000 1'b0;
end 
// dadosExternos[ 1 ]
initial
begin
	dadosExternos[1] = 1'b1;
end 
// dadosExternos[ 0 ]
initial
begin
	dadosExternos[0] = 1'b1;
	dadosExternos[0] = #640000 1'b0;
end 

IO_vlg_sample_tst tb_sample (
	.OpIO(OpIO),
	.clock(clock),
	.dadosEscrita(dadosEscrita),
	.dadosExternos(dadosExternos),
	.endereco(endereco),
	.reset(reset),
	.sampler_tx(sampler)
);

IO_vlg_check_tst tb_out(
	.dadosLidos(dadosLidos),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.display4(display4),
	.display5(display5),
	.display6(display6),
	.display7(display7),
	.neg1(neg1),
	.neg2(neg2),
	.neg3(neg3),
	.sampler_rx(sampler)
);
endmodule

