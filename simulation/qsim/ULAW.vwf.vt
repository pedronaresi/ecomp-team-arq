// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2017 19:02:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_sample_tst(
	OpULA,
	dado1,
	dado2,
	shamt,
	sampler_tx
);
input [4:0] OpULA;
input [31:0] dado1;
input [31:0] dado2;
input [4:0] shamt;
output sampler_tx;

reg sample;
time current_time;
always @(OpULA or dado1 or dado2 or shamt)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_vlg_check_tst (
	UlaCrl,
	saida,
	sampler_rx
);
input  UlaCrl;
input [31:0] saida;
input sampler_rx;

reg  UlaCrl_expected;
reg [31:0] saida_expected;

reg  UlaCrl_prev;
reg [31:0] saida_prev;

reg  UlaCrl_expected_prev;
reg [31:0] saida_expected_prev;

reg  last_UlaCrl_exp;
reg [31:0] last_saida_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	UlaCrl_prev = UlaCrl;
	saida_prev = saida;
end

// update expected /o prevs

always @(trigger)
begin
	UlaCrl_expected_prev = UlaCrl_expected;
	saida_expected_prev = saida_expected;
end


// expected saida[ 31 ]
initial
begin
	saida_expected[31] = 1'bX;
end 
// expected saida[ 30 ]
initial
begin
	saida_expected[30] = 1'bX;
end 
// expected saida[ 29 ]
initial
begin
	saida_expected[29] = 1'bX;
end 
// expected saida[ 28 ]
initial
begin
	saida_expected[28] = 1'bX;
end 
// expected saida[ 27 ]
initial
begin
	saida_expected[27] = 1'bX;
end 
// expected saida[ 26 ]
initial
begin
	saida_expected[26] = 1'bX;
end 
// expected saida[ 25 ]
initial
begin
	saida_expected[25] = 1'bX;
end 
// expected saida[ 24 ]
initial
begin
	saida_expected[24] = 1'bX;
end 
// expected saida[ 23 ]
initial
begin
	saida_expected[23] = 1'bX;
end 
// expected saida[ 22 ]
initial
begin
	saida_expected[22] = 1'bX;
end 
// expected saida[ 21 ]
initial
begin
	saida_expected[21] = 1'bX;
end 
// expected saida[ 20 ]
initial
begin
	saida_expected[20] = 1'bX;
end 
// expected saida[ 19 ]
initial
begin
	saida_expected[19] = 1'bX;
end 
// expected saida[ 18 ]
initial
begin
	saida_expected[18] = 1'bX;
end 
// expected saida[ 17 ]
initial
begin
	saida_expected[17] = 1'bX;
end 
// expected saida[ 16 ]
initial
begin
	saida_expected[16] = 1'bX;
end 
// expected saida[ 15 ]
initial
begin
	saida_expected[15] = 1'bX;
end 
// expected saida[ 14 ]
initial
begin
	saida_expected[14] = 1'bX;
end 
// expected saida[ 13 ]
initial
begin
	saida_expected[13] = 1'bX;
end 
// expected saida[ 12 ]
initial
begin
	saida_expected[12] = 1'bX;
end 
// expected saida[ 11 ]
initial
begin
	saida_expected[11] = 1'bX;
end 
// expected saida[ 10 ]
initial
begin
	saida_expected[10] = 1'bX;
end 
// expected saida[ 9 ]
initial
begin
	saida_expected[9] = 1'bX;
end 
// expected saida[ 8 ]
initial
begin
	saida_expected[8] = 1'bX;
end 
// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 

// expected UlaCrl
initial
begin
	UlaCrl_expected = 1'bX;
end 
// generate trigger
always @(UlaCrl_expected or UlaCrl or saida_expected or saida)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected UlaCrl = %b | expected saida = %b | ",UlaCrl_expected_prev,saida_expected_prev);
	$display("| real UlaCrl = %b | real saida = %b | ",UlaCrl_prev,saida_prev);
`endif
	if (
		( UlaCrl_expected_prev !== 1'bx ) && ( UlaCrl_prev !== UlaCrl_expected_prev )
		&& ((UlaCrl_expected_prev !== last_UlaCrl_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UlaCrl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UlaCrl_expected_prev);
		$display ("     Real value = %b", UlaCrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_UlaCrl_exp = UlaCrl_expected_prev;
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end
	if (
		( saida_expected_prev[8] !== 1'bx ) && ( saida_prev[8] !== saida_expected_prev[8] )
		&& ((saida_expected_prev[8] !== last_saida_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[8] = saida_expected_prev[8];
	end
	if (
		( saida_expected_prev[9] !== 1'bx ) && ( saida_prev[9] !== saida_expected_prev[9] )
		&& ((saida_expected_prev[9] !== last_saida_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[9] = saida_expected_prev[9];
	end
	if (
		( saida_expected_prev[10] !== 1'bx ) && ( saida_prev[10] !== saida_expected_prev[10] )
		&& ((saida_expected_prev[10] !== last_saida_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[10] = saida_expected_prev[10];
	end
	if (
		( saida_expected_prev[11] !== 1'bx ) && ( saida_prev[11] !== saida_expected_prev[11] )
		&& ((saida_expected_prev[11] !== last_saida_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[11] = saida_expected_prev[11];
	end
	if (
		( saida_expected_prev[12] !== 1'bx ) && ( saida_prev[12] !== saida_expected_prev[12] )
		&& ((saida_expected_prev[12] !== last_saida_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[12] = saida_expected_prev[12];
	end
	if (
		( saida_expected_prev[13] !== 1'bx ) && ( saida_prev[13] !== saida_expected_prev[13] )
		&& ((saida_expected_prev[13] !== last_saida_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[13] = saida_expected_prev[13];
	end
	if (
		( saida_expected_prev[14] !== 1'bx ) && ( saida_prev[14] !== saida_expected_prev[14] )
		&& ((saida_expected_prev[14] !== last_saida_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[14] = saida_expected_prev[14];
	end
	if (
		( saida_expected_prev[15] !== 1'bx ) && ( saida_prev[15] !== saida_expected_prev[15] )
		&& ((saida_expected_prev[15] !== last_saida_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[15] = saida_expected_prev[15];
	end
	if (
		( saida_expected_prev[16] !== 1'bx ) && ( saida_prev[16] !== saida_expected_prev[16] )
		&& ((saida_expected_prev[16] !== last_saida_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[16] = saida_expected_prev[16];
	end
	if (
		( saida_expected_prev[17] !== 1'bx ) && ( saida_prev[17] !== saida_expected_prev[17] )
		&& ((saida_expected_prev[17] !== last_saida_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[17] = saida_expected_prev[17];
	end
	if (
		( saida_expected_prev[18] !== 1'bx ) && ( saida_prev[18] !== saida_expected_prev[18] )
		&& ((saida_expected_prev[18] !== last_saida_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[18] = saida_expected_prev[18];
	end
	if (
		( saida_expected_prev[19] !== 1'bx ) && ( saida_prev[19] !== saida_expected_prev[19] )
		&& ((saida_expected_prev[19] !== last_saida_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[19] = saida_expected_prev[19];
	end
	if (
		( saida_expected_prev[20] !== 1'bx ) && ( saida_prev[20] !== saida_expected_prev[20] )
		&& ((saida_expected_prev[20] !== last_saida_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[20] = saida_expected_prev[20];
	end
	if (
		( saida_expected_prev[21] !== 1'bx ) && ( saida_prev[21] !== saida_expected_prev[21] )
		&& ((saida_expected_prev[21] !== last_saida_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[21] = saida_expected_prev[21];
	end
	if (
		( saida_expected_prev[22] !== 1'bx ) && ( saida_prev[22] !== saida_expected_prev[22] )
		&& ((saida_expected_prev[22] !== last_saida_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[22] = saida_expected_prev[22];
	end
	if (
		( saida_expected_prev[23] !== 1'bx ) && ( saida_prev[23] !== saida_expected_prev[23] )
		&& ((saida_expected_prev[23] !== last_saida_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[23] = saida_expected_prev[23];
	end
	if (
		( saida_expected_prev[24] !== 1'bx ) && ( saida_prev[24] !== saida_expected_prev[24] )
		&& ((saida_expected_prev[24] !== last_saida_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[24] = saida_expected_prev[24];
	end
	if (
		( saida_expected_prev[25] !== 1'bx ) && ( saida_prev[25] !== saida_expected_prev[25] )
		&& ((saida_expected_prev[25] !== last_saida_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[25] = saida_expected_prev[25];
	end
	if (
		( saida_expected_prev[26] !== 1'bx ) && ( saida_prev[26] !== saida_expected_prev[26] )
		&& ((saida_expected_prev[26] !== last_saida_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[26] = saida_expected_prev[26];
	end
	if (
		( saida_expected_prev[27] !== 1'bx ) && ( saida_prev[27] !== saida_expected_prev[27] )
		&& ((saida_expected_prev[27] !== last_saida_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[27] = saida_expected_prev[27];
	end
	if (
		( saida_expected_prev[28] !== 1'bx ) && ( saida_prev[28] !== saida_expected_prev[28] )
		&& ((saida_expected_prev[28] !== last_saida_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[28] = saida_expected_prev[28];
	end
	if (
		( saida_expected_prev[29] !== 1'bx ) && ( saida_prev[29] !== saida_expected_prev[29] )
		&& ((saida_expected_prev[29] !== last_saida_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[29] = saida_expected_prev[29];
	end
	if (
		( saida_expected_prev[30] !== 1'bx ) && ( saida_prev[30] !== saida_expected_prev[30] )
		&& ((saida_expected_prev[30] !== last_saida_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[30] = saida_expected_prev[30];
	end
	if (
		( saida_expected_prev[31] !== 1'bx ) && ( saida_prev[31] !== saida_expected_prev[31] )
		&& ((saida_expected_prev[31] !== last_saida_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida_exp[31] = saida_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] OpULA;
reg [31:0] dado1;
reg [31:0] dado2;
reg [4:0] shamt;
// wires                                               
wire UlaCrl;
wire [31:0] saida;

wire sampler;                             

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.OpULA(OpULA),
	.UlaCrl(UlaCrl),
	.dado1(dado1),
	.dado2(dado2),
	.saida(saida),
	.shamt(shamt)
);
// shamt[ 4 ]
initial
begin
	shamt[4] = 1'b0;
end 
// shamt[ 3 ]
initial
begin
	shamt[3] = 1'b0;
end 
// shamt[ 2 ]
initial
begin
	shamt[2] = 1'b0;
end 
// shamt[ 1 ]
initial
begin
	shamt[1] = 1'b0;
end 
// shamt[ 0 ]
initial
begin
	shamt[0] = 1'b1;
end 
// OpULA[ 4 ]
initial
begin
	OpULA[4] = 1'b0;
	OpULA[4] = #640000 1'b1;
	OpULA[4] = #160000 1'b0;
end 
// OpULA[ 3 ]
initial
begin
	OpULA[3] = 1'b0;
	OpULA[3] = #320000 1'b1;
	OpULA[3] = #320000 1'b0;
end 
// OpULA[ 2 ]
initial
begin
	repeat(2)
	begin
		OpULA[2] = 1'b0;
		OpULA[2] = #160000 1'b1;
		# 160000;
	end
	OpULA[2] = 1'b0;
end 
// OpULA[ 1 ]
initial
begin
	repeat(5)
	begin
		OpULA[1] = 1'b0;
		OpULA[1] = #80000 1'b1;
		# 80000;
	end
	OpULA[1] = 1'b0;
end 
// OpULA[ 0 ]
initial
begin
	repeat(10)
	begin
		OpULA[0] = 1'b0;
		OpULA[0] = #40000 1'b1;
		# 40000;
	end
	OpULA[0] = 1'b0;
end 
// dado1[ 31 ]
initial
begin
	dado1[31] = 1'b0;
end 
// dado1[ 30 ]
initial
begin
	dado1[30] = 1'b0;
end 
// dado1[ 29 ]
initial
begin
	dado1[29] = 1'b0;
end 
// dado1[ 28 ]
initial
begin
	dado1[28] = 1'b0;
end 
// dado1[ 27 ]
initial
begin
	dado1[27] = 1'b0;
end 
// dado1[ 26 ]
initial
begin
	dado1[26] = 1'b0;
end 
// dado1[ 25 ]
initial
begin
	dado1[25] = 1'b0;
end 
// dado1[ 24 ]
initial
begin
	dado1[24] = 1'b0;
end 
// dado1[ 23 ]
initial
begin
	dado1[23] = 1'b0;
end 
// dado1[ 22 ]
initial
begin
	dado1[22] = 1'b0;
end 
// dado1[ 21 ]
initial
begin
	dado1[21] = 1'b0;
end 
// dado1[ 20 ]
initial
begin
	dado1[20] = 1'b0;
end 
// dado1[ 19 ]
initial
begin
	dado1[19] = 1'b0;
end 
// dado1[ 18 ]
initial
begin
	dado1[18] = 1'b0;
end 
// dado1[ 17 ]
initial
begin
	dado1[17] = 1'b0;
end 
// dado1[ 16 ]
initial
begin
	dado1[16] = 1'b0;
end 
// dado1[ 15 ]
initial
begin
	dado1[15] = 1'b0;
end 
// dado1[ 14 ]
initial
begin
	dado1[14] = 1'b0;
end 
// dado1[ 13 ]
initial
begin
	dado1[13] = 1'b0;
end 
// dado1[ 12 ]
initial
begin
	dado1[12] = 1'b0;
end 
// dado1[ 11 ]
initial
begin
	dado1[11] = 1'b0;
end 
// dado1[ 10 ]
initial
begin
	dado1[10] = 1'b0;
end 
// dado1[ 9 ]
initial
begin
	dado1[9] = 1'b0;
end 
// dado1[ 8 ]
initial
begin
	dado1[8] = 1'b0;
end 
// dado1[ 7 ]
initial
begin
	dado1[7] = 1'b0;
end 
// dado1[ 6 ]
initial
begin
	dado1[6] = 1'b0;
end 
// dado1[ 5 ]
initial
begin
	dado1[5] = 1'b0;
end 
// dado1[ 4 ]
initial
begin
	dado1[4] = 1'b0;
end 
// dado1[ 3 ]
initial
begin
	dado1[3] = 1'b0;
end 
// dado1[ 2 ]
initial
begin
	dado1[2] = 1'b0;
end 
// dado1[ 1 ]
initial
begin
	dado1[1] = 1'b1;
end 
// dado1[ 0 ]
initial
begin
	dado1[0] = 1'b1;
end 
// dado2[ 31 ]
initial
begin
	dado2[31] = 1'b0;
end 
// dado2[ 30 ]
initial
begin
	dado2[30] = 1'b0;
end 
// dado2[ 29 ]
initial
begin
	dado2[29] = 1'b0;
end 
// dado2[ 28 ]
initial
begin
	dado2[28] = 1'b0;
end 
// dado2[ 27 ]
initial
begin
	dado2[27] = 1'b0;
end 
// dado2[ 26 ]
initial
begin
	dado2[26] = 1'b0;
end 
// dado2[ 25 ]
initial
begin
	dado2[25] = 1'b0;
end 
// dado2[ 24 ]
initial
begin
	dado2[24] = 1'b0;
end 
// dado2[ 23 ]
initial
begin
	dado2[23] = 1'b0;
end 
// dado2[ 22 ]
initial
begin
	dado2[22] = 1'b0;
end 
// dado2[ 21 ]
initial
begin
	dado2[21] = 1'b0;
end 
// dado2[ 20 ]
initial
begin
	dado2[20] = 1'b0;
end 
// dado2[ 19 ]
initial
begin
	dado2[19] = 1'b0;
end 
// dado2[ 18 ]
initial
begin
	dado2[18] = 1'b0;
end 
// dado2[ 17 ]
initial
begin
	dado2[17] = 1'b0;
end 
// dado2[ 16 ]
initial
begin
	dado2[16] = 1'b0;
end 
// dado2[ 15 ]
initial
begin
	dado2[15] = 1'b0;
end 
// dado2[ 14 ]
initial
begin
	dado2[14] = 1'b0;
end 
// dado2[ 13 ]
initial
begin
	dado2[13] = 1'b0;
end 
// dado2[ 12 ]
initial
begin
	dado2[12] = 1'b0;
end 
// dado2[ 11 ]
initial
begin
	dado2[11] = 1'b0;
end 
// dado2[ 10 ]
initial
begin
	dado2[10] = 1'b0;
end 
// dado2[ 9 ]
initial
begin
	dado2[9] = 1'b0;
end 
// dado2[ 8 ]
initial
begin
	dado2[8] = 1'b0;
end 
// dado2[ 7 ]
initial
begin
	dado2[7] = 1'b0;
end 
// dado2[ 6 ]
initial
begin
	dado2[6] = 1'b0;
end 
// dado2[ 5 ]
initial
begin
	dado2[5] = 1'b0;
end 
// dado2[ 4 ]
initial
begin
	dado2[4] = 1'b0;
end 
// dado2[ 3 ]
initial
begin
	dado2[3] = 1'b0;
end 
// dado2[ 2 ]
initial
begin
	dado2[2] = 1'b1;
end 
// dado2[ 1 ]
initial
begin
	dado2[1] = 1'b0;
end 
// dado2[ 0 ]
initial
begin
	dado2[0] = 1'b0;
end 

ULA_vlg_sample_tst tb_sample (
	.OpULA(OpULA),
	.dado1(dado1),
	.dado2(dado2),
	.shamt(shamt),
	.sampler_tx(sampler)
);

ULA_vlg_check_tst tb_out(
	.UlaCrl(UlaCrl),
	.saida(saida),
	.sampler_rx(sampler)
);
endmodule

