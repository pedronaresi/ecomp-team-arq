// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2017 18:45:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Controle_vlg_sample_tst(
	Inst,
	botaoEntrada,
	botaoSaida,
	sampler_tx
);
input [5:0] Inst;
input  botaoEntrada;
input  botaoSaida;
output sampler_tx;

reg sample;
time current_time;
always @(Inst or botaoEntrada or botaoSaida)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Controle_vlg_check_tst (
	NegativoEx,
	OpExt,
	OpIO,
	OpMem,
	OpSaida,
	OpULA,
	OrigULA,
	PCDst,
	RegDst,
	escreveReg,
	halt,
	jal,
	sampler_rx
);
input  NegativoEx;
input  OpExt;
input  OpIO;
input  OpMem;
input [2:0] OpSaida;
input [4:0] OpULA;
input  OrigULA;
input [1:0] PCDst;
input  RegDst;
input  escreveReg;
input  halt;
input  jal;
input sampler_rx;

reg  NegativoEx_expected;
reg  OpExt_expected;
reg  OpIO_expected;
reg  OpMem_expected;
reg [2:0] OpSaida_expected;
reg [4:0] OpULA_expected;
reg  OrigULA_expected;
reg [1:0] PCDst_expected;
reg  RegDst_expected;
reg  escreveReg_expected;
reg  halt_expected;
reg  jal_expected;

reg  NegativoEx_prev;
reg  OpExt_prev;
reg  OpIO_prev;
reg  OpMem_prev;
reg [2:0] OpSaida_prev;
reg [4:0] OpULA_prev;
reg  OrigULA_prev;
reg [1:0] PCDst_prev;
reg  RegDst_prev;
reg  escreveReg_prev;
reg  halt_prev;
reg  jal_prev;

reg  NegativoEx_expected_prev;
reg  OpExt_expected_prev;
reg  OpIO_expected_prev;
reg  OpMem_expected_prev;
reg [2:0] OpSaida_expected_prev;
reg [4:0] OpULA_expected_prev;
reg  OrigULA_expected_prev;
reg [1:0] PCDst_expected_prev;
reg  RegDst_expected_prev;
reg  escreveReg_expected_prev;
reg  halt_expected_prev;
reg  jal_expected_prev;

reg  last_NegativoEx_exp;
reg  last_OpExt_exp;
reg  last_OpIO_exp;
reg  last_OpMem_exp;
reg [2:0] last_OpSaida_exp;
reg [4:0] last_OpULA_exp;
reg  last_OrigULA_exp;
reg [1:0] last_PCDst_exp;
reg  last_RegDst_exp;
reg  last_escreveReg_exp;
reg  last_halt_exp;
reg  last_jal_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	NegativoEx_prev = NegativoEx;
	OpExt_prev = OpExt;
	OpIO_prev = OpIO;
	OpMem_prev = OpMem;
	OpSaida_prev = OpSaida;
	OpULA_prev = OpULA;
	OrigULA_prev = OrigULA;
	PCDst_prev = PCDst;
	RegDst_prev = RegDst;
	escreveReg_prev = escreveReg;
	halt_prev = halt;
	jal_prev = jal;
end

// update expected /o prevs

always @(trigger)
begin
	NegativoEx_expected_prev = NegativoEx_expected;
	OpExt_expected_prev = OpExt_expected;
	OpIO_expected_prev = OpIO_expected;
	OpMem_expected_prev = OpMem_expected;
	OpSaida_expected_prev = OpSaida_expected;
	OpULA_expected_prev = OpULA_expected;
	OrigULA_expected_prev = OrigULA_expected;
	PCDst_expected_prev = PCDst_expected;
	RegDst_expected_prev = RegDst_expected;
	escreveReg_expected_prev = escreveReg_expected;
	halt_expected_prev = halt_expected;
	jal_expected_prev = jal_expected;
end



// expected NegativoEx
initial
begin
	NegativoEx_expected = 1'bX;
end 

// expected OpExt
initial
begin
	OpExt_expected = 1'bX;
end 

// expected OpIO
initial
begin
	OpIO_expected = 1'bX;
end 

// expected OpMem
initial
begin
	OpMem_expected = 1'bX;
end 

// expected RegDst
initial
begin
	RegDst_expected = 1'bX;
end 

// expected escreveReg
initial
begin
	escreveReg_expected = 1'bX;
end 

// expected halt
initial
begin
	halt_expected = 1'bX;
end 

// expected jal
initial
begin
	jal_expected = 1'bX;
end 

// expected OrigULA
initial
begin
	OrigULA_expected = 1'bX;
end 
// expected PCDst[ 1 ]
initial
begin
	PCDst_expected[1] = 1'bX;
end 
// expected PCDst[ 0 ]
initial
begin
	PCDst_expected[0] = 1'bX;
end 
// expected OpULA[ 4 ]
initial
begin
	OpULA_expected[4] = 1'bX;
end 
// expected OpULA[ 3 ]
initial
begin
	OpULA_expected[3] = 1'bX;
end 
// expected OpULA[ 2 ]
initial
begin
	OpULA_expected[2] = 1'bX;
end 
// expected OpULA[ 1 ]
initial
begin
	OpULA_expected[1] = 1'bX;
end 
// expected OpULA[ 0 ]
initial
begin
	OpULA_expected[0] = 1'bX;
end 
// expected OpSaida[ 2 ]
initial
begin
	OpSaida_expected[2] = 1'bX;
end 
// expected OpSaida[ 1 ]
initial
begin
	OpSaida_expected[1] = 1'bX;
end 
// expected OpSaida[ 0 ]
initial
begin
	OpSaida_expected[0] = 1'bX;
end 
// generate trigger
always @(NegativoEx_expected or NegativoEx or OpExt_expected or OpExt or OpIO_expected or OpIO or OpMem_expected or OpMem or OpSaida_expected or OpSaida or OpULA_expected or OpULA or OrigULA_expected or OrigULA or PCDst_expected or PCDst or RegDst_expected or RegDst or escreveReg_expected or escreveReg or halt_expected or halt or jal_expected or jal)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected NegativoEx = %b | expected OpExt = %b | expected OpIO = %b | expected OpMem = %b | expected OpSaida = %b | expected OpULA = %b | expected OrigULA = %b | expected PCDst = %b | expected RegDst = %b | expected escreveReg = %b | expected halt = %b | expected jal = %b | ",NegativoEx_expected_prev,OpExt_expected_prev,OpIO_expected_prev,OpMem_expected_prev,OpSaida_expected_prev,OpULA_expected_prev,OrigULA_expected_prev,PCDst_expected_prev,RegDst_expected_prev,escreveReg_expected_prev,halt_expected_prev,jal_expected_prev);
	$display("| real NegativoEx = %b | real OpExt = %b | real OpIO = %b | real OpMem = %b | real OpSaida = %b | real OpULA = %b | real OrigULA = %b | real PCDst = %b | real RegDst = %b | real escreveReg = %b | real halt = %b | real jal = %b | ",NegativoEx_prev,OpExt_prev,OpIO_prev,OpMem_prev,OpSaida_prev,OpULA_prev,OrigULA_prev,PCDst_prev,RegDst_prev,escreveReg_prev,halt_prev,jal_prev);
`endif
	if (
		( NegativoEx_expected_prev !== 1'bx ) && ( NegativoEx_prev !== NegativoEx_expected_prev )
		&& ((NegativoEx_expected_prev !== last_NegativoEx_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NegativoEx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NegativoEx_expected_prev);
		$display ("     Real value = %b", NegativoEx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NegativoEx_exp = NegativoEx_expected_prev;
	end
	if (
		( OpExt_expected_prev !== 1'bx ) && ( OpExt_prev !== OpExt_expected_prev )
		&& ((OpExt_expected_prev !== last_OpExt_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpExt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpExt_expected_prev);
		$display ("     Real value = %b", OpExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OpExt_exp = OpExt_expected_prev;
	end
	if (
		( OpIO_expected_prev !== 1'bx ) && ( OpIO_prev !== OpIO_expected_prev )
		&& ((OpIO_expected_prev !== last_OpIO_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpIO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpIO_expected_prev);
		$display ("     Real value = %b", OpIO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OpIO_exp = OpIO_expected_prev;
	end
	if (
		( OpMem_expected_prev !== 1'bx ) && ( OpMem_prev !== OpMem_expected_prev )
		&& ((OpMem_expected_prev !== last_OpMem_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpMem_expected_prev);
		$display ("     Real value = %b", OpMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OpMem_exp = OpMem_expected_prev;
	end
	if (
		( OpSaida_expected_prev[0] !== 1'bx ) && ( OpSaida_prev[0] !== OpSaida_expected_prev[0] )
		&& ((OpSaida_expected_prev[0] !== last_OpSaida_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpSaida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpSaida_expected_prev);
		$display ("     Real value = %b", OpSaida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OpSaida_exp[0] = OpSaida_expected_prev[0];
	end
	if (
		( OpSaida_expected_prev[1] !== 1'bx ) && ( OpSaida_prev[1] !== OpSaida_expected_prev[1] )
		&& ((OpSaida_expected_prev[1] !== last_OpSaida_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpSaida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpSaida_expected_prev);
		$display ("     Real value = %b", OpSaida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OpSaida_exp[1] = OpSaida_expected_prev[1];
	end
	if (
		( OpSaida_expected_prev[2] !== 1'bx ) && ( OpSaida_prev[2] !== OpSaida_expected_prev[2] )
		&& ((OpSaida_expected_prev[2] !== last_OpSaida_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpSaida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpSaida_expected_prev);
		$display ("     Real value = %b", OpSaida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OpSaida_exp[2] = OpSaida_expected_prev[2];
	end
	if (
		( OpULA_expected_prev[0] !== 1'bx ) && ( OpULA_prev[0] !== OpULA_expected_prev[0] )
		&& ((OpULA_expected_prev[0] !== last_OpULA_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpULA_expected_prev);
		$display ("     Real value = %b", OpULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OpULA_exp[0] = OpULA_expected_prev[0];
	end
	if (
		( OpULA_expected_prev[1] !== 1'bx ) && ( OpULA_prev[1] !== OpULA_expected_prev[1] )
		&& ((OpULA_expected_prev[1] !== last_OpULA_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpULA_expected_prev);
		$display ("     Real value = %b", OpULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OpULA_exp[1] = OpULA_expected_prev[1];
	end
	if (
		( OpULA_expected_prev[2] !== 1'bx ) && ( OpULA_prev[2] !== OpULA_expected_prev[2] )
		&& ((OpULA_expected_prev[2] !== last_OpULA_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpULA_expected_prev);
		$display ("     Real value = %b", OpULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OpULA_exp[2] = OpULA_expected_prev[2];
	end
	if (
		( OpULA_expected_prev[3] !== 1'bx ) && ( OpULA_prev[3] !== OpULA_expected_prev[3] )
		&& ((OpULA_expected_prev[3] !== last_OpULA_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpULA_expected_prev);
		$display ("     Real value = %b", OpULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OpULA_exp[3] = OpULA_expected_prev[3];
	end
	if (
		( OpULA_expected_prev[4] !== 1'bx ) && ( OpULA_prev[4] !== OpULA_expected_prev[4] )
		&& ((OpULA_expected_prev[4] !== last_OpULA_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OpULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OpULA_expected_prev);
		$display ("     Real value = %b", OpULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OpULA_exp[4] = OpULA_expected_prev[4];
	end
	if (
		( OrigULA_expected_prev !== 1'bx ) && ( OrigULA_prev !== OrigULA_expected_prev )
		&& ((OrigULA_expected_prev !== last_OrigULA_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OrigULA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OrigULA_expected_prev);
		$display ("     Real value = %b", OrigULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OrigULA_exp = OrigULA_expected_prev;
	end
	if (
		( PCDst_expected_prev[0] !== 1'bx ) && ( PCDst_prev[0] !== PCDst_expected_prev[0] )
		&& ((PCDst_expected_prev[0] !== last_PCDst_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCDst[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCDst_expected_prev);
		$display ("     Real value = %b", PCDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PCDst_exp[0] = PCDst_expected_prev[0];
	end
	if (
		( PCDst_expected_prev[1] !== 1'bx ) && ( PCDst_prev[1] !== PCDst_expected_prev[1] )
		&& ((PCDst_expected_prev[1] !== last_PCDst_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCDst[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCDst_expected_prev);
		$display ("     Real value = %b", PCDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PCDst_exp[1] = PCDst_expected_prev[1];
	end
	if (
		( RegDst_expected_prev !== 1'bx ) && ( RegDst_prev !== RegDst_expected_prev )
		&& ((RegDst_expected_prev !== last_RegDst_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_expected_prev);
		$display ("     Real value = %b", RegDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RegDst_exp = RegDst_expected_prev;
	end
	if (
		( escreveReg_expected_prev !== 1'bx ) && ( escreveReg_prev !== escreveReg_expected_prev )
		&& ((escreveReg_expected_prev !== last_escreveReg_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port escreveReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", escreveReg_expected_prev);
		$display ("     Real value = %b", escreveReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_escreveReg_exp = escreveReg_expected_prev;
	end
	if (
		( halt_expected_prev !== 1'bx ) && ( halt_prev !== halt_expected_prev )
		&& ((halt_expected_prev !== last_halt_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port halt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", halt_expected_prev);
		$display ("     Real value = %b", halt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_halt_exp = halt_expected_prev;
	end
	if (
		( jal_expected_prev !== 1'bx ) && ( jal_prev !== jal_expected_prev )
		&& ((jal_expected_prev !== last_jal_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jal_expected_prev);
		$display ("     Real value = %b", jal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_jal_exp = jal_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] Inst;
reg botaoEntrada;
reg botaoSaida;
// wires                                               
wire NegativoEx;
wire OpExt;
wire OpIO;
wire OpMem;
wire [2:0] OpSaida;
wire [4:0] OpULA;
wire OrigULA;
wire [1:0] PCDst;
wire RegDst;
wire escreveReg;
wire halt;
wire jal;

wire sampler;                             

// assign statements (if any)                          
Controle i1 (
// port map - connection between master ports and signals/registers   
	.Inst(Inst),
	.NegativoEx(NegativoEx),
	.OpExt(OpExt),
	.OpIO(OpIO),
	.OpMem(OpMem),
	.OpSaida(OpSaida),
	.OpULA(OpULA),
	.OrigULA(OrigULA),
	.PCDst(PCDst),
	.RegDst(RegDst),
	.botaoEntrada(botaoEntrada),
	.botaoSaida(botaoSaida),
	.escreveReg(escreveReg),
	.halt(halt),
	.jal(jal)
);
// Inst[ 5 ]
initial
begin
	Inst[5] = 1'b0;
	Inst[5] = #660000 1'b1;
	Inst[5] = #60000 1'b0;
end 
// Inst[ 4 ]
initial
begin
	Inst[4] = 1'b0;
	Inst[4] = #240000 1'b1;
	Inst[4] = #420000 1'b0;
	Inst[4] = #60000 1'b1;
	Inst[4] = #60000 1'b0;
end 
// Inst[ 3 ]
initial
begin
	Inst[3] = 1'b0;
	Inst[3] = #120000 1'b1;
	Inst[3] = #120000 1'b0;
	Inst[3] = #120000 1'b1;
	Inst[3] = #300000 1'b0;
	Inst[3] = #60000 1'b1;
	Inst[3] = #60000 1'b0;
end 
// Inst[ 2 ]
initial
begin
	Inst[2] = 1'b0;
	Inst[2] = #180000 1'b1;
	Inst[2] = #60000 1'b0;
	Inst[2] = #60000 1'b1;
	Inst[2] = #60000 1'b0;
	Inst[2] = #240000 1'b1;
	Inst[2] = #60000 1'b0;
	Inst[2] = #60000 1'b1;
	Inst[2] = #60000 1'b0;
end 
// Inst[ 1 ]
initial
begin
	Inst[1] = 1'b0;
	Inst[1] = #60000 1'b1;
	Inst[1] = #60000 1'b0;
	Inst[1] = #60000 1'b1;
	Inst[1] = #60000 1'b0;
	Inst[1] = #240000 1'b1;
	Inst[1] = #180000 1'b0;
end 
// Inst[ 0 ]
initial
begin
	Inst[0] = 1'b1;
	Inst[0] = #60000 1'b0;
	Inst[0] = #60000 1'b1;
	Inst[0] = #60000 1'b0;
	Inst[0] = #240000 1'b1;
	Inst[0] = #60000 1'b0;
	Inst[0] = #60000 1'b1;
	Inst[0] = #120000 1'b0;
	Inst[0] = #60000 1'b1;
	Inst[0] = #60000 1'b0;
end 

// botaoEntrada
initial
begin
	botaoEntrada = 1'b1;
end 

// botaoSaida
initial
begin
	botaoSaida = 1'b1;
end 

Controle_vlg_sample_tst tb_sample (
	.Inst(Inst),
	.botaoEntrada(botaoEntrada),
	.botaoSaida(botaoSaida),
	.sampler_tx(sampler)
);

Controle_vlg_check_tst tb_out(
	.NegativoEx(NegativoEx),
	.OpExt(OpExt),
	.OpIO(OpIO),
	.OpMem(OpMem),
	.OpSaida(OpSaida),
	.OpULA(OpULA),
	.OrigULA(OrigULA),
	.PCDst(PCDst),
	.RegDst(RegDst),
	.escreveReg(escreveReg),
	.halt(halt),
	.jal(jal),
	.sampler_rx(sampler)
);
endmodule

